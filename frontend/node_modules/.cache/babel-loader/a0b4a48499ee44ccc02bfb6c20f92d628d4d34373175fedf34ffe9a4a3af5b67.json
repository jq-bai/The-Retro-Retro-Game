{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import axios from'axios';import WelcomeScreen from'./components/WelcomeScreen';import NameFormScreen from'./components/NameFormScreen';import HoldingScreen from'./components/HoldingScreen';import StartingScreen from'./components/StartingScreen';import GameStateInitial from'./components/GameStateInitial';import GameStateEnd from'./components/GameStateEnd';// Import the GameStateEnd component\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[currentScreen,setCurrentScreen]=useState('welcome');const[playerName,setPlayerName]=useState('');const[isReady,setIsReady]=useState(false);const[userList,setUserList]=useState([]);const[scores,setScores]=useState({});const[winner,setWinner]=useState(null);// Add state for winner\nconst eventSourceRef=useRef(null);const joinGame=()=>{setCurrentScreen('nameForm');};const submitName=name=>{axios.post('/submit-name',{displayName:name}).then(response=>{setPlayerName(name);setUserList(response.data.users);setCurrentScreen('holding');// Set up SSE connection after user has entered their display name\nif(!eventSourceRef.current){const newEventSource=new EventSource(`/events?displayName=${name}`);newEventSource.onmessage=event=>{const data=JSON.parse(event.data);if(data.type==='userList'){setUserList(data.users);}else if(data.type==='startGame'){setCurrentScreen('starting');}else if(data.type==='scoreUpdate'){setScores(data.scores);}else if(data.type==='gameEnd'){setWinner(data.winner);// Set the winner\nsetCurrentScreen('gameStateEnd');// Transition to GameStateEnd screen\n}};newEventSource.onerror=error=>{console.error(\"EventSource failed:\",error);newEventSource.close();eventSourceRef.current=null;};eventSourceRef.current=newEventSource;}}).catch(error=>{console.error('Error submitting name:',error);});};const setReady=()=>{axios.post('/set-ready',{displayName:playerName}).then(response=>{setIsReady(prevIsReady=>!prevIsReady);}).catch(error=>{console.error('Error setting ready status:',error);});};const handleNewGame=()=>{axios.post('/new-game').then(response=>{setScores({});setCurrentScreen('starting');}).catch(error=>{console.error('Error starting new game:',error);});};const handleReturnToTitle=()=>{axios.post('/clear-data').then(response=>{setPlayerName('');setIsReady(false);setUserList([]);setScores({});setWinner(null);setCurrentScreen('welcome');}).catch(error=>{console.error('Error returning to title screen:',error);});};useEffect(()=>{// Clean up the EventSource connection when the component unmounts\nreturn()=>{if(eventSourceRef.current){eventSourceRef.current.close();}};},[]);return/*#__PURE__*/_jsxs(\"div\",{children:[currentScreen==='welcome'&&/*#__PURE__*/_jsx(WelcomeScreen,{joinGame:joinGame}),currentScreen==='nameForm'&&/*#__PURE__*/_jsx(NameFormScreen,{onSubmit:submitName}),currentScreen==='holding'&&/*#__PURE__*/_jsx(HoldingScreen,{message:\"Waiting for players...\",userList:userList,onReady:setReady,isReady:isReady}),currentScreen==='starting'&&/*#__PURE__*/_jsx(StartingScreen,{userList:userList,onCountdownComplete:()=>setCurrentScreen('gameState')}),currentScreen==='gameState'&&/*#__PURE__*/_jsx(GameStateInitial,{userList:userList,displayName:playerName,eventSource:eventSourceRef.current,setCurrentScreen:setCurrentScreen,setWinner:setWinner}),currentScreen==='gameStateEnd'&&/*#__PURE__*/_jsx(GameStateEnd,{scores:scores,winner:winner,onNewGame:handleNewGame,onReturnToTitle:handleReturnToTitle}),\" \"]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","WelcomeScreen","NameFormScreen","HoldingScreen","StartingScreen","GameStateInitial","GameStateEnd","jsx","_jsx","jsxs","_jsxs","App","currentScreen","setCurrentScreen","playerName","setPlayerName","isReady","setIsReady","userList","setUserList","scores","setScores","winner","setWinner","eventSourceRef","joinGame","submitName","name","post","displayName","then","response","data","users","current","newEventSource","EventSource","onmessage","event","JSON","parse","type","onerror","error","console","close","catch","setReady","prevIsReady","handleNewGame","handleReturnToTitle","children","onSubmit","message","onReady","onCountdownComplete","eventSource","onNewGame","onReturnToTitle"],"sources":["/Users/jq/VSC/The-Retro-Retro-Game/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport WelcomeScreen from './components/WelcomeScreen';\nimport NameFormScreen from './components/NameFormScreen';\nimport HoldingScreen from './components/HoldingScreen';\nimport StartingScreen from './components/StartingScreen';\nimport GameStateInitial from './components/GameStateInitial';\nimport GameStateEnd from './components/GameStateEnd'; // Import the GameStateEnd component\n\nfunction App() {\n    const [currentScreen, setCurrentScreen] = useState('welcome');\n    const [playerName, setPlayerName] = useState('');\n    const [isReady, setIsReady] = useState(false);\n    const [userList, setUserList] = useState([]);\n    const [scores, setScores] = useState({});\n    const [winner, setWinner] = useState(null); // Add state for winner\n    const eventSourceRef = useRef(null);\n\n    const joinGame = () => {\n        setCurrentScreen('nameForm');\n    };\n\n    const submitName = (name) => {\n        axios.post('/submit-name', { displayName: name })\n            .then(response => {\n                setPlayerName(name);\n                setUserList(response.data.users);\n                setCurrentScreen('holding');\n\n                // Set up SSE connection after user has entered their display name\n                if (!eventSourceRef.current) {\n                    const newEventSource = new EventSource(`/events?displayName=${name}`);\n                    newEventSource.onmessage = (event) => {\n                        const data = JSON.parse(event.data);\n                        if (data.type === 'userList') {\n                            setUserList(data.users);\n                        } else if (data.type === 'startGame') {\n                            setCurrentScreen('starting');\n                        } else if (data.type === 'scoreUpdate') {\n                            setScores(data.scores);\n                        } else if (data.type === 'gameEnd') {\n                            setWinner(data.winner); // Set the winner\n                            setCurrentScreen('gameStateEnd'); // Transition to GameStateEnd screen\n                        }\n                    };\n                    newEventSource.onerror = (error) => {\n                        console.error(\"EventSource failed:\", error);\n                        newEventSource.close();\n                        eventSourceRef.current = null;\n                    };\n                    eventSourceRef.current = newEventSource;\n                }\n            })\n            .catch(error => {\n                console.error('Error submitting name:', error);\n            });\n    };\n\n    const setReady = () => {\n        axios.post('/set-ready', { displayName: playerName })\n            .then(response => {\n                setIsReady(prevIsReady => !prevIsReady);\n            })\n            .catch(error => {\n                console.error('Error setting ready status:', error);\n            });\n    };\n\n    const handleNewGame = () => {\n        axios.post('/new-game')\n            .then(response => {\n                setScores({});\n                setCurrentScreen('starting');\n            })\n            .catch(error => {\n                console.error('Error starting new game:', error);\n            });\n    };\n\n    const handleReturnToTitle = () => {\n        axios.post('/clear-data')\n            .then(response => {\n                setPlayerName('');\n                setIsReady(false);\n                setUserList([]);\n                setScores({});\n                setWinner(null);\n                setCurrentScreen('welcome');\n            })\n            .catch(error => {\n                console.error('Error returning to title screen:', error);\n            });\n    };\n\n    useEffect(() => {\n        // Clean up the EventSource connection when the component unmounts\n        return () => {\n            if (eventSourceRef.current) {\n                eventSourceRef.current.close();\n            }\n        };\n    }, []);\n\n    return (\n        <div>\n            {currentScreen === 'welcome' && <WelcomeScreen joinGame={joinGame} />}\n            {currentScreen === 'nameForm' && <NameFormScreen onSubmit={submitName} />}\n            {currentScreen === 'holding' && <HoldingScreen message=\"Waiting for players...\" userList={userList} onReady={setReady} isReady={isReady} />}\n            {currentScreen === 'starting' && <StartingScreen userList={userList} onCountdownComplete={() => setCurrentScreen('gameState')} />}\n            {currentScreen === 'gameState' && <GameStateInitial userList={userList} displayName={playerName} eventSource={eventSourceRef.current} setCurrentScreen={setCurrentScreen} setWinner={setWinner} />}\n            {currentScreen === 'gameStateEnd' && <GameStateEnd scores={scores} winner={winner} onNewGame={handleNewGame} onReturnToTitle={handleReturnToTitle} />} {/* Add the winner prop and handlers */}\n        </div>\n    );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}