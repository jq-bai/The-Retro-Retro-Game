{"ast":null,"code":"/*\n    This is the main React component for the app\n    This manages the flow of the game, handles user inputs, and communicates and synchronizes the interactions and states between the clients and server\n*/import React,{useState,useEffect,useRef}from'react';// Imports the useState, useEffect, and useRef hooks from React\nimport axios from'axios';// Imports the Axios library for making HTTP requests\n// React components\nimport WelcomeScreen from'./components/WelcomeScreen';// Imports the WelcomeScreen component which is the landing state of the app\nimport NameFormScreen from'./components/NameFormScreen';// Imports the NameFormScreen component for a client to enter their name to initiate joining a game\nimport HoldingScreen from'./components/HoldingScreen';// Imports the HoldingScreen component which holds all currently connected clients and allow them get ready for the game\nimport StartingScreen from'./components/StartingScreen';// Imports the StartingScreen component which initiates the countdown to start the game once all clients are ready\nimport GameStateInitial from'./components/GameStateInitial';// Imports the GameStateInitial component which is the main game state\nimport GameStateEnd from'./components/GameStateEnd';// Imports the GameStateEnd component which is the end game state\n// Main App component\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){// State variables\nconst[currentScreen,setCurrentScreen]=useState('welcome');// Tracks the current screen state, defaults to the welcome screen\nconst[playerName,setPlayerName]=useState('');// Tracks the client's name\nconst[isReady,setIsReady]=useState(false);// Tracks the client's ready status\nconst[userList,setUserList]=useState([]);// Tracks the list of all connected clients\nconst[scores,setScores]=useState({});// Tracks the scores of all connected clients\nconst[winner,setWinner]=useState(null);// Tracks the winner of the game\nconst[lastActionMessage,setLastActionMessage]=useState('');// Tracks the last action message\nconst eventSourceRef=useRef(null);// Reference for the EventSource connection\n// Function to join the game\n// From WelcomeScreen.js\nconst joinGame=()=>{setCurrentScreen('nameForm');console.log('Attempting to join a game');};// Function to submit the client's name and sets up an SSE connection\n// From NameFormScreen.js\nconst submitName=name=>{axios.post('/submit-name',{displayName:name}).then(response=>{// Record client's name and transits to next screen\nsetPlayerName(name);setUserList(response.data.users);setCurrentScreen('holding');console.log('Submitting name:',name);// Sets up an SSE connection between the server and the current client\nif(!eventSourceRef.current){const newEventSource=new EventSource(`/events?displayName=${name}`);newEventSource.onmessage=event=>{const data=JSON.parse(event.data);// Handling different types of events from the server\nif(data.type==='userList'){setUserList(data.users);}else if(data.type==='startGame'){setCurrentScreen('starting');}else if(data.type==='scoreUpdate'){setScores(data.scores);}else if(data.type==='gameEnd'){setWinner(data.winner);setCurrentScreen('gameStateEnd');}else if(data.type==='reset'){handleReturnToTitle();}else if(data.type==='lastAction'){setLastActionMessage(data.message);}};// Error handling for the EventSource connection\nnewEventSource.onerror=error=>{console.error(\"EventSource failed:\",error);newEventSource.close();eventSourceRef.current=null;// Reset the eventSourceRef\n};eventSourceRef.current=newEventSource;console.log('EventSource connection established');}})// Error handling for the name submission\n.catch(error=>{console.error('Error submitting name:',error);});};// Function to toggle the client's ready status\n// From HoldingScreen.js\nconst setReady=()=>{axios.post('/set-ready',{displayName:playerName}).then(response=>{setIsReady(prevIsReady=>!prevIsReady);console.log('Setting ready:',!isReady);})// Error handling for setting the ready status\n.catch(error=>{console.error('Error setting ready status:',error);});};// Function to return to the title screen after a game has ended\n// From GameStateEnd.js\nconst handleReturnToTitle=()=>{axios.post('/clear-data').then(response=>{console.log('Server response:',response.data);// Logs the server response\n// Clears all data and resets the game state\nsetPlayerName('');setIsReady(false);setUserList([]);setScores({});setWinner(null);setCurrentScreen('welcome');// Closes the EventSource connection\nif(eventSourceRef.current){eventSourceRef.current.close();eventSourceRef.current=null;}})// Error handling for returning to the title screen\n.catch(error=>{console.error('Error returning to title screen:',error);});};// useEffect hook to clean up the EventSource connection when the component unmounts\nuseEffect(()=>{return()=>{if(eventSourceRef.current){eventSourceRef.current.close();}};},[]);// Main render function\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[currentScreen==='welcome'&&/*#__PURE__*/_jsx(WelcomeScreen,{joinGame:joinGame}),\" \",currentScreen==='nameForm'&&/*#__PURE__*/_jsx(NameFormScreen,{onSubmit:submitName}),\" \",currentScreen==='holding'&&/*#__PURE__*/_jsx(HoldingScreen,{userList:userList,onReady:setReady,isReady:isReady}),\" \",currentScreen==='starting'&&/*#__PURE__*/_jsx(StartingScreen,{userList:userList,onCountdownComplete:()=>setCurrentScreen('gameState')}),\" \",currentScreen==='gameState'&&/*#__PURE__*/_jsx(GameStateInitial,{userList:userList,displayName:playerName,eventSource:eventSourceRef.current,setCurrentScreen:setCurrentScreen,setWinner:setWinner,lastActionMessage:lastActionMessage,setLastActionMessage:setLastActionMessage}),\" \",currentScreen==='gameStateEnd'&&/*#__PURE__*/_jsx(GameStateEnd,{winner:winner,onReturnToTitle:handleReturnToTitle}),\" \"]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","WelcomeScreen","NameFormScreen","HoldingScreen","StartingScreen","GameStateInitial","GameStateEnd","jsx","_jsx","jsxs","_jsxs","App","currentScreen","setCurrentScreen","playerName","setPlayerName","isReady","setIsReady","userList","setUserList","scores","setScores","winner","setWinner","lastActionMessage","setLastActionMessage","eventSourceRef","joinGame","console","log","submitName","name","post","displayName","then","response","data","users","current","newEventSource","EventSource","onmessage","event","JSON","parse","type","handleReturnToTitle","message","onerror","error","close","catch","setReady","prevIsReady","children","onSubmit","onReady","onCountdownComplete","eventSource","onReturnToTitle"],"sources":["/Users/jq/VSC/The-Retro-Retro-Game/frontend/src/App.js"],"sourcesContent":["/*\n    This is the main React component for the app\n    This manages the flow of the game, handles user inputs, and communicates and synchronizes the interactions and states between the clients and server\n*/\n\nimport React, { useState, useEffect, useRef } from 'react'; // Imports the useState, useEffect, and useRef hooks from React\nimport axios from 'axios'; // Imports the Axios library for making HTTP requests\n\n// React components\nimport WelcomeScreen from './components/WelcomeScreen'; // Imports the WelcomeScreen component which is the landing state of the app\nimport NameFormScreen from './components/NameFormScreen'; // Imports the NameFormScreen component for a client to enter their name to initiate joining a game\nimport HoldingScreen from './components/HoldingScreen'; // Imports the HoldingScreen component which holds all currently connected clients and allow them get ready for the game\nimport StartingScreen from './components/StartingScreen'; // Imports the StartingScreen component which initiates the countdown to start the game once all clients are ready\nimport GameStateInitial from './components/GameStateInitial'; // Imports the GameStateInitial component which is the main game state\nimport GameStateEnd from './components/GameStateEnd'; // Imports the GameStateEnd component which is the end game state\n\n// Main App component\nfunction App() {\n    // State variables\n    const [currentScreen, setCurrentScreen] = useState('welcome'); // Tracks the current screen state, defaults to the welcome screen\n    const [playerName, setPlayerName] = useState(''); // Tracks the client's name\n    const [isReady, setIsReady] = useState(false); // Tracks the client's ready status\n    const [userList, setUserList] = useState([]); // Tracks the list of all connected clients\n    const [scores, setScores] = useState({}); // Tracks the scores of all connected clients\n    const [winner, setWinner] = useState(null); // Tracks the winner of the game\n    const [lastActionMessage, setLastActionMessage] = useState(''); // Tracks the last action message\n    const eventSourceRef = useRef(null); // Reference for the EventSource connection\n\n    // Function to join the game\n    // From WelcomeScreen.js\n    const joinGame = () => {\n        setCurrentScreen('nameForm');\n        console.log('Attempting to join a game');\n    };\n\n    // Function to submit the client's name and sets up an SSE connection\n    // From NameFormScreen.js\n    const submitName = (name) => {\n        axios.post('/submit-name', { displayName: name })\n            .then(response => {\n                // Record client's name and transits to next screen\n                setPlayerName(name);\n                setUserList(response.data.users);\n                setCurrentScreen('holding');\n                console.log('Submitting name:', name);\n\n                // Sets up an SSE connection between the server and the current client\n                if (!eventSourceRef.current) {\n                    const newEventSource = new EventSource(`/events?displayName=${name}`);\n                    newEventSource.onmessage = (event) => {\n                        const data = JSON.parse(event.data);\n\n                        // Handling different types of events from the server\n                        if (data.type === 'userList') {\n                            setUserList(data.users);\n                        } else if (data.type === 'startGame') {\n                            setCurrentScreen('starting');\n                        } else if (data.type === 'scoreUpdate') {\n                            setScores(data.scores);\n                        } else if (data.type === 'gameEnd') {\n                            setWinner(data.winner);\n                            setCurrentScreen('gameStateEnd');\n                        } else if (data.type === 'reset') {\n                            handleReturnToTitle();\n                        } else if (data.type === 'lastAction') {\n                            setLastActionMessage(data.message);\n                        }\n                    };\n\n                    // Error handling for the EventSource connection\n                    newEventSource.onerror = (error) => {\n                        console.error(\"EventSource failed:\", error);\n                        newEventSource.close();\n                        eventSourceRef.current = null; // Reset the eventSourceRef\n                    };\n\n                    eventSourceRef.current = newEventSource;\n                    console.log('EventSource connection established');\n                }\n            })\n\n            // Error handling for the name submission\n            .catch(error => {\n                console.error('Error submitting name:', error);\n            });\n    };\n\n    // Function to toggle the client's ready status\n    // From HoldingScreen.js\n    const setReady = () => {\n        axios.post('/set-ready', { displayName: playerName })\n            .then(response => {\n                setIsReady(prevIsReady => !prevIsReady);\n                console.log('Setting ready:', !isReady);\n            })\n\n            // Error handling for setting the ready status\n            .catch(error => {\n                console.error('Error setting ready status:', error);\n            });\n    };\n\n    // Function to return to the title screen after a game has ended\n    // From GameStateEnd.js\n    const handleReturnToTitle = () => {\n        axios.post('/clear-data')\n            .then(response => {\n                console.log('Server response:', response.data); // Logs the server response\n\n                // Clears all data and resets the game state\n                setPlayerName('');\n                setIsReady(false);\n                setUserList([]);\n                setScores({});\n                setWinner(null);\n                setCurrentScreen('welcome');\n\n                // Closes the EventSource connection\n                if (eventSourceRef.current) {\n                    eventSourceRef.current.close();\n                    eventSourceRef.current = null;\n                }\n            })\n\n            // Error handling for returning to the title screen\n            .catch(error => {\n                console.error('Error returning to title screen:', error);\n            });\n    };\n\n    // useEffect hook to clean up the EventSource connection when the component unmounts\n    useEffect(() => {\n        return () => {\n            if (eventSourceRef.current) {\n                eventSourceRef.current.close();\n            }\n        };\n    }, []);\n\n    // Main render function\n    return (\n        <div>\n            {currentScreen === 'welcome' && <WelcomeScreen joinGame={joinGame} />} {/* Renders the WelcomeScreen component */}\n            {currentScreen === 'nameForm' && <NameFormScreen onSubmit={submitName} />} {/* Renders the NameFormScreen component */}\n            {currentScreen === 'holding' && <HoldingScreen userList={userList} onReady={setReady} isReady={isReady} />} {/* Renders the HoldingScreen component */}\n            {currentScreen === 'starting' && <StartingScreen userList={userList} onCountdownComplete={() => setCurrentScreen('gameState')} />} {/* Renders the StartingScreen component */}\n            {currentScreen === 'gameState' && <GameStateInitial userList={userList} displayName={playerName} eventSource={eventSourceRef.current} setCurrentScreen={setCurrentScreen} setWinner={setWinner} lastActionMessage={lastActionMessage} setLastActionMessage={setLastActionMessage} />} {/* Renders the GameStateInitial component */}\n            {currentScreen === 'gameStateEnd' && <GameStateEnd winner={winner} onReturnToTitle={handleReturnToTitle} />} {/* Renders the GameStateEnd component */}\n        </div>\n    );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}