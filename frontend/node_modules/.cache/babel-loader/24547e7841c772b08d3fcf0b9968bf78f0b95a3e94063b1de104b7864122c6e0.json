{"ast":null,"code":"import React,{useState,useEffect}from'react';import{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";const GameStateInitial=_ref=>{let{userList,displayName,eventSource,setCurrentScreen,setWinner}=_ref;const[board,setBoard]=useState([]);const[revealedCells,setRevealedCells]=useState([]);const[currentPlayer,setCurrentPlayer]=useState(null);const[scores,setScores]=useState({});useEffect(()=>{console.log(\"useEffect triggered with displayName:\",displayName);if(eventSource){eventSource.onmessage=event=>{console.log(\"Event received:\",event.data);// Log any event received\nconst data=JSON.parse(event.data);if(data.type==='boardUpdate'){console.log(\"Board update received:\",data.board,data.revealedCells,data.scores);// Log the board update\nsetBoard(data.board);setRevealedCells(data.revealedCells);setScores(data.scores);}else if(data.type==='currentPlayer'){console.log(\"Current player update received:\",data.displayName);// Log the current player update\nsetCurrentPlayer(data.displayName);}else if(data.type==='scoreUpdate'){console.log(\"Score update received:\",data.scores);// Log the score update\nsetScores(data.scores);}else if(data.type==='gameEnd'){console.log(\"Game end received:\",data.winner);// Log the game end event\nsetWinner(data.winner);// Set the winner\nsetCurrentScreen('gameStateEnd');// Transition to GameStateEnd screen\n}// Handle other event types if needed\n};eventSource.onerror=error=>{console.error(\"EventSource failed:\",error);eventSource.close();};}},[displayName,eventSource,setCurrentScreen,setWinner]);useEffect(()=>{console.log(\"All clients loaded\");},[userList]);useEffect(()=>{// Fetch the initial board from the server\nfetch(\"/generate-board\").then(response=>response.json()).then(data=>{console.log(\"Fetched initial board:\",data.board);setBoard(data.board);setRevealedCells(Array.from({length:data.board.length},()=>Array(data.board[0].length).fill(false)));}).catch(error=>console.error(\"Error fetching initial board:\",error));// Fetch the initial player from the server\nfetch(\"/initial-player\").then(response=>response.json()).then(data=>{console.log(\"Fetched initial player:\",data.displayName);setCurrentPlayer(data.displayName);}).catch(error=>console.error(\"Error fetching initial player:\",error));// Fetch the initial scores from the server\nfetch(\"/initial-scores\").then(response=>response.json()).then(data=>{console.log(\"Fetched initial scores:\",data.scores);setScores(data.scores);}).catch(error=>console.error(\"Error fetching initial scores:\",error));},[]);const handleCellClick=(rowIndex,colIndex)=>{if(revealedCells[rowIndex][colIndex]||currentPlayer!==displayName)return;// Prevent clicking on the same cell more than once or if it's not the player's turn\nconst newRevealedCells=revealedCells.map((row,rIdx)=>row.map((cell,cIdx)=>rIdx===rowIndex&&cIdx===colIndex?true:cell));setRevealedCells(newRevealedCells);const isMine=board[rowIndex][colIndex]==='ðŸ’£';// Assuming 'ðŸ’£' represents a mine\nconst scoreChange=isMine?-1:1;const newScores={...scores,[displayName]:(scores[displayName]||0)+scoreChange};setScores(newScores);console.log(\"Sending updated board state and scores to server:\",board,newRevealedCells,newScores);// Log the updated board state and scores\n// Send the updated board state and scores to the server\nfetch(\"/update-board\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({board,revealedCells:newRevealedCells,scores:newScores,displayName})}).catch(error=>console.error(\"Error updating board:\",error));};const revealAllCells=()=>{const newRevealedCells=revealedCells.map(row=>row.map(()=>true));setRevealedCells(newRevealedCells);console.log(\"All cells revealed for testing purposes\");// Optionally, you can send this state to the server if needed\nfetch(\"/update-board\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({board,revealedCells:newRevealedCells,scores,displayName})}).catch(error=>console.error(\"Error updating board:\",error));};return/*#__PURE__*/_jsxs(\"div\",{className:\"hero center\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"user-grid\",children:userList.filter(user=>user.displayName).map(user=>/*#__PURE__*/_jsx(\"div\",{className:\"user-card-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:`user-card ${user.displayName===currentPlayer?'current-player':''}`,children:[user.displayName===displayName?\"You\":user.displayName,/*#__PURE__*/_jsxs(\"div\",{children:[\"Score: \",scores[user.displayName]||0]})]})},user.displayName))}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"div\",{className:\"board\",children:board.map((row,rowIndex)=>/*#__PURE__*/_jsx(\"div\",{className:\"board-row\",children:row.map((cell,colIndex)=>/*#__PURE__*/_jsx(\"div\",{className:`board-cell ${revealedCells[rowIndex][colIndex]&&board[rowIndex][colIndex]==='ðŸ’£'?'mine':''}`,onClick:()=>handleCellClick(rowIndex,colIndex),children:revealedCells[rowIndex][colIndex]?cell:''},colIndex))},rowIndex))}),/*#__PURE__*/_jsx(\"button\",{onClick:revealAllCells,children:\"Reveal All Cells\"}),\" \"]});};export default GameStateInitial;","map":{"version":3,"names":["React","useState","useEffect","jsxs","_jsxs","jsx","_jsx","GameStateInitial","_ref","userList","displayName","eventSource","setCurrentScreen","setWinner","board","setBoard","revealedCells","setRevealedCells","currentPlayer","setCurrentPlayer","scores","setScores","console","log","onmessage","event","data","JSON","parse","type","winner","onerror","error","close","fetch","then","response","json","Array","from","length","fill","catch","handleCellClick","rowIndex","colIndex","newRevealedCells","map","row","rIdx","cell","cIdx","isMine","scoreChange","newScores","method","headers","body","stringify","revealAllCells","className","children","filter","user","onClick"],"sources":["/Users/jq/VSC/The-Retro-Retro-Game/frontend/src/components/GameStateInitial.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst GameStateInitial = ({ userList, displayName, eventSource, setCurrentScreen, setWinner }) => {\n    const [board, setBoard] = useState([]);\n    const [revealedCells, setRevealedCells] = useState([]);\n    const [currentPlayer, setCurrentPlayer] = useState(null);\n    const [scores, setScores] = useState({});\n    \n    useEffect(() => {\n        console.log(\"useEffect triggered with displayName:\", displayName);\n\n        if (eventSource) {\n            eventSource.onmessage = (event) => {\n                console.log(\"Event received:\", event.data); // Log any event received\n                const data = JSON.parse(event.data);\n                if (data.type === 'boardUpdate') {\n                    console.log(\"Board update received:\", data.board, data.revealedCells, data.scores); // Log the board update\n                    setBoard(data.board);\n                    setRevealedCells(data.revealedCells);\n                    setScores(data.scores);\n                } else if (data.type === 'currentPlayer') {\n                    console.log(\"Current player update received:\", data.displayName); // Log the current player update\n                    setCurrentPlayer(data.displayName);\n                } else if (data.type === 'scoreUpdate') {\n                    console.log(\"Score update received:\", data.scores); // Log the score update\n                    setScores(data.scores);\n                } else if (data.type === 'gameEnd') {\n                    console.log(\"Game end received:\", data.winner); // Log the game end event\n                    setWinner(data.winner); // Set the winner\n                    setCurrentScreen('gameStateEnd'); // Transition to GameStateEnd screen\n                }\n                // Handle other event types if needed\n            };\n\n            eventSource.onerror = (error) => {\n                console.error(\"EventSource failed:\", error);\n                eventSource.close();\n            };\n        }\n    }, [displayName, eventSource, setCurrentScreen, setWinner]);\n\n    useEffect(() => {\n        console.log(\"All clients loaded\");\n    }, [userList]);\n\n    useEffect(() => {\n        // Fetch the initial board from the server\n        fetch(\"/generate-board\")\n            .then(response => response.json())\n            .then(data => {\n                console.log(\"Fetched initial board:\", data.board);\n                setBoard(data.board);\n                setRevealedCells(Array.from({ length: data.board.length }, () => Array(data.board[0].length).fill(false)));\n            })\n            .catch(error => console.error(\"Error fetching initial board:\", error));\n\n        // Fetch the initial player from the server\n        fetch(\"/initial-player\")\n            .then(response => response.json())\n            .then(data => {\n                console.log(\"Fetched initial player:\", data.displayName);\n                setCurrentPlayer(data.displayName);\n            })\n            .catch(error => console.error(\"Error fetching initial player:\", error));\n\n        // Fetch the initial scores from the server\n        fetch(\"/initial-scores\")\n            .then(response => response.json())\n            .then(data => {\n                console.log(\"Fetched initial scores:\", data.scores);\n                setScores(data.scores);\n            })\n            .catch(error => console.error(\"Error fetching initial scores:\", error));\n    }, []);\n\n    const handleCellClick = (rowIndex, colIndex) => {\n        if (revealedCells[rowIndex][colIndex] || currentPlayer !== displayName) return; // Prevent clicking on the same cell more than once or if it's not the player's turn\n\n        const newRevealedCells = revealedCells.map((row, rIdx) => \n            row.map((cell, cIdx) => (rIdx === rowIndex && cIdx === colIndex ? true : cell))\n        );\n        setRevealedCells(newRevealedCells);\n\n        const isMine = board[rowIndex][colIndex] === 'ðŸ’£'; // Assuming 'ðŸ’£' represents a mine\n        const scoreChange = isMine ? -1 : 1;\n        const newScores = { ...scores, [displayName]: (scores[displayName] || 0) + scoreChange };\n        setScores(newScores);\n\n        console.log(\"Sending updated board state and scores to server:\", board, newRevealedCells, newScores); // Log the updated board state and scores\n\n        // Send the updated board state and scores to the server\n        fetch(\"/update-board\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ board, revealedCells: newRevealedCells, scores: newScores, displayName }),\n        }).catch(error => console.error(\"Error updating board:\", error));\n    };\n\n    const revealAllCells = () => {\n        const newRevealedCells = revealedCells.map(row => row.map(() => true));\n        setRevealedCells(newRevealedCells);\n\n        console.log(\"All cells revealed for testing purposes\");\n\n        // Optionally, you can send this state to the server if needed\n        fetch(\"/update-board\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ board, revealedCells: newRevealedCells, scores, displayName }),\n        }).catch(error => console.error(\"Error updating board:\", error));\n    };\n\n    return (\n        <div className=\"hero center\">\n            <div className=\"user-grid\">\n                {userList.filter(user => user.displayName).map(user => (\n                    <div key={user.displayName} className=\"user-card-container\">\n                        <div className={`user-card ${user.displayName === currentPlayer ? 'current-player' : ''}`}>\n                            {user.displayName === displayName ? \"You\" : user.displayName}\n                            <div>Score: {scores[user.displayName] || 0}</div>\n                        </div>\n                    </div>\n                ))}\n            </div>\n            <br />\n            <div className=\"board\">\n                {board.map((row, rowIndex) => (\n                    <div key={rowIndex} className=\"board-row\">\n                        {row.map((cell, colIndex) => (\n                            <div \n                                key={colIndex} \n                                className={`board-cell ${revealedCells[rowIndex][colIndex] && board[rowIndex][colIndex] === 'ðŸ’£' ? 'mine' : ''}`} \n                                onClick={() => handleCellClick(rowIndex, colIndex)}\n                            >\n                                {revealedCells[rowIndex][colIndex] ? cell : ''}\n                            </div>\n                        ))}\n                    </div>\n                ))}\n            </div>\n            <button onClick={revealAllCells}>Reveal All Cells</button> {/* Button to reveal all cells */}\n        </div>\n    );\n};\n\nexport default GameStateInitial;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}