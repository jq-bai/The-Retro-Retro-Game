{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const GameStateInitial=_ref=>{let{userList,displayName}=_ref;const eventSourceRef=useRef(null);const[board,setBoard]=useState([]);const[revealedCells,setRevealedCells]=useState([]);const[currentPlayer,setCurrentPlayer]=useState(null);useEffect(()=>{console.log(\"useEffect triggered with displayName:\",displayName);if(!eventSourceRef.current&&displayName){console.log(\"Creating new EventSource for displayName:\",displayName);const eventSource=new EventSource(`/events?displayName=${displayName}`);eventSourceRef.current=eventSource;eventSource.onmessage=event=>{console.log(\"Event received:\",event.data);// Log any event received\nconst data=JSON.parse(event.data);if(data.type==='boardUpdate'){console.log(\"Board update received:\",data.board,data.revealedCells);// Log the board update\nsetBoard(data.board);setRevealedCells(data.revealedCells);}else if(data.type==='currentPlayer'){console.log(\"Current player update received:\",data.displayName);// Log the current player update\nsetCurrentPlayer(data.displayName);}// Handle other event types if needed\n};eventSource.onerror=error=>{console.error(\"EventSource failed:\",error);eventSource.close();eventSourceRef.current=null;};return()=>{console.log(\"Closing EventSource\");eventSource.close();eventSourceRef.current=null;};}},[displayName]);useEffect(()=>{console.log(\"All clients loaded\");},[userList]);useEffect(()=>{// Fetch the initial board from the server\nfetch(\"/generate-board\").then(response=>response.json()).then(data=>{console.log(\"Fetched initial board:\",data.board);setBoard(data.board);setRevealedCells(Array.from({length:data.board.length},()=>Array(data.board[0].length).fill(false)));}).catch(error=>console.error(\"Error fetching initial board:\",error));// Fetch the initial player from the server\nfetch(\"/initial-player\").then(response=>response.json()).then(data=>{console.log(\"Fetched initial player:\",data.displayName);setCurrentPlayer(data.displayName);}).catch(error=>console.error(\"Error fetching initial player:\",error));},[]);const handleCellClick=(rowIndex,colIndex)=>{if(revealedCells[rowIndex][colIndex]||currentPlayer!==displayName)return;// Prevent clicking on the same cell more than once or if it's not the player's turn\nconst newRevealedCells=revealedCells.map((row,rIdx)=>row.map((cell,cIdx)=>rIdx===rowIndex&&cIdx===colIndex?true:cell));setRevealedCells(newRevealedCells);console.log(\"Sending updated board state to server:\",board,newRevealedCells);// Log the updated board state\n// Send the updated board state to the server\nfetch(\"/update-board\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({board,revealedCells:newRevealedCells,displayName})}).catch(error=>console.error(\"Error updating board:\",error));};return/*#__PURE__*/_jsxs(\"div\",{className:\"hero center\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"user-grid\",children:userList.filter(user=>user.displayName).map(user=>/*#__PURE__*/_jsx(\"div\",{className:\"user-card-container\",children:/*#__PURE__*/_jsx(\"div\",{className:\"user-card\",children:user.displayName})},user.displayName))}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"div\",{className:\"board\",children:board.map((row,rowIndex)=>/*#__PURE__*/_jsx(\"div\",{className:\"board-row\",children:row.map((cell,colIndex)=>/*#__PURE__*/_jsx(\"div\",{className:\"board-cell\",onClick:()=>handleCellClick(rowIndex,colIndex),children:revealedCells[rowIndex][colIndex]?cell:''},colIndex))},rowIndex))})]});};export default GameStateInitial;","map":{"version":3,"names":["React","useState","useEffect","useRef","jsx","_jsx","jsxs","_jsxs","GameStateInitial","_ref","userList","displayName","eventSourceRef","board","setBoard","revealedCells","setRevealedCells","currentPlayer","setCurrentPlayer","console","log","current","eventSource","EventSource","onmessage","event","data","JSON","parse","type","onerror","error","close","fetch","then","response","json","Array","from","length","fill","catch","handleCellClick","rowIndex","colIndex","newRevealedCells","map","row","rIdx","cell","cIdx","method","headers","body","stringify","className","children","filter","user","onClick"],"sources":["/Users/baijianqing/VSC/The-Retro-Retro-Game/frontend/src/components/GameStateInitial.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nconst GameStateInitial = ({ userList, displayName }) => {\n    const eventSourceRef = useRef(null);\n    const [board, setBoard] = useState([]);\n    const [revealedCells, setRevealedCells] = useState([]);\n    const [currentPlayer, setCurrentPlayer] = useState(null);\n\n    useEffect(() => {\n        console.log(\"useEffect triggered with displayName:\", displayName);\n\n        if (!eventSourceRef.current && displayName) {\n            console.log(\"Creating new EventSource for displayName:\", displayName);\n            const eventSource = new EventSource(`/events?displayName=${displayName}`);\n            eventSourceRef.current = eventSource;\n\n            eventSource.onmessage = (event) => {\n                console.log(\"Event received:\", event.data); // Log any event received\n                const data = JSON.parse(event.data);\n                if (data.type === 'boardUpdate') {\n                    console.log(\"Board update received:\", data.board, data.revealedCells); // Log the board update\n                    setBoard(data.board);\n                    setRevealedCells(data.revealedCells);\n                } else if (data.type === 'currentPlayer') {\n                    console.log(\"Current player update received:\", data.displayName); // Log the current player update\n                    setCurrentPlayer(data.displayName);\n                }\n                // Handle other event types if needed\n            };\n\n            eventSource.onerror = (error) => {\n                console.error(\"EventSource failed:\", error);\n                eventSource.close();\n                eventSourceRef.current = null;\n            };\n\n            return () => {\n                console.log(\"Closing EventSource\");\n                eventSource.close();\n                eventSourceRef.current = null;\n            };\n        }\n    }, [displayName]);\n\n    useEffect(() => {\n        console.log(\"All clients loaded\");\n    }, [userList]);\n\n    useEffect(() => {\n        // Fetch the initial board from the server\n        fetch(\"/generate-board\")\n            .then(response => response.json())\n            .then(data => {\n                console.log(\"Fetched initial board:\", data.board);\n                setBoard(data.board);\n                setRevealedCells(Array.from({ length: data.board.length }, () => Array(data.board[0].length).fill(false)));\n            })\n            .catch(error => console.error(\"Error fetching initial board:\", error));\n\n        // Fetch the initial player from the server\n        fetch(\"/initial-player\")\n            .then(response => response.json())\n            .then(data => {\n                console.log(\"Fetched initial player:\", data.displayName);\n                setCurrentPlayer(data.displayName);\n            })\n            .catch(error => console.error(\"Error fetching initial player:\", error));\n    }, []);\n\n    const handleCellClick = (rowIndex, colIndex) => {\n        if (revealedCells[rowIndex][colIndex] || currentPlayer !== displayName) return; // Prevent clicking on the same cell more than once or if it's not the player's turn\n\n        const newRevealedCells = revealedCells.map((row, rIdx) => \n            row.map((cell, cIdx) => (rIdx === rowIndex && cIdx === colIndex ? true : cell))\n        );\n        setRevealedCells(newRevealedCells);\n\n        console.log(\"Sending updated board state to server:\", board, newRevealedCells); // Log the updated board state\n\n        // Send the updated board state to the server\n        fetch(\"/update-board\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ board, revealedCells: newRevealedCells, displayName }),\n        }).catch(error => console.error(\"Error updating board:\", error));\n    };\n\n    return (\n        <div className=\"hero center\">\n            <div className=\"user-grid\">\n                {userList.filter(user => user.displayName).map(user => (\n                    <div key={user.displayName} className=\"user-card-container\">\n                        <div className=\"user-card\">\n                            {user.displayName}\n                        </div>\n                    </div>\n                ))}\n            </div>\n            <br />\n            <div className=\"board\">\n                {board.map((row, rowIndex) => (\n                    <div key={rowIndex} className=\"board-row\">\n                        {row.map((cell, colIndex) => (\n                            <div \n                                key={colIndex} \n                                className=\"board-cell\" \n                                onClick={() => handleCellClick(rowIndex, colIndex)}\n                            >\n                                {revealedCells[rowIndex][colIndex] ? cell : ''}\n                            </div>\n                        ))}\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default GameStateInitial;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}