{"ast":null,"code":"import { b, c as c$1, a as a$3 } from './chunk-ODPU3M3Z.mjs';\nimport { g, c, a as a$2, e, j, i, f } from './chunk-TRZ6EGBZ.mjs';\nexport { g as PlayMode } from './chunk-TRZ6EGBZ.mjs';\nimport './chunk-HDDX7F4A.mjs';\nimport { a as a$1 } from './chunk-ZWH2ESXT.mjs';\nvar M = (r, t) => t.kind === \"method\" && t.descriptor && !(\"value\" in t.descriptor) ? {\n    ...t,\n    finisher(e) {\n      e.createProperty(t.key, r);\n    }\n  } : {\n    kind: \"field\",\n    key: Symbol(),\n    placement: \"own\",\n    descriptor: {},\n    originalKey: t.key,\n    initializer() {\n      typeof t.initializer == \"function\" && (this[t.key] = t.initializer.call(this));\n    },\n    finisher(e) {\n      e.createProperty(t.key, r);\n    }\n  },\n  x = (r, t, e) => {\n    t.constructor.createProperty(e, r);\n  };\nfunction p(r) {\n  return (t, e) => e !== void 0 ? x(r, t, e) : M(r, t);\n}\nfunction k(r) {\n  return p({\n    ...r,\n    state: !0\n  });\n}\nvar v = _ref => {\n  let {\n    finisher: r,\n    descriptor: t\n  } = _ref;\n  return (e, i) => {\n    var n;\n    if (i === void 0) {\n      let l = (n = e.originalKey) !== null && n !== void 0 ? n : e.key,\n        h = t != null ? {\n          kind: \"method\",\n          placement: \"prototype\",\n          key: l,\n          descriptor: t(e.key)\n        } : {\n          ...e,\n          key: l\n        };\n      return r != null && (h.finisher = function (b) {\n        r(b, l);\n      }), h;\n    }\n    {\n      let l = e.constructor;\n      t !== void 0 && Object.defineProperty(e, i, t(i)), r == null || r(l, i);\n    }\n  };\n};\nfunction O(r, t) {\n  return v({\n    descriptor: e => {\n      let i = {\n        get() {\n          var n, l;\n          return (l = (n = this.renderRoot) === null || n === void 0 ? void 0 : n.querySelector(r)) !== null && l !== void 0 ? l : null;\n        },\n        enumerable: !0,\n        configurable: !0\n      };\n      if (t) {\n        let n = typeof e == \"symbol\" ? Symbol() : \"__\" + e;\n        i.get = function () {\n          var l, h;\n          return this[n] === void 0 && (this[n] = (h = (l = this.renderRoot) === null || l === void 0 ? void 0 : l.querySelector(r)) !== null && h !== void 0 ? h : null), this[n];\n        };\n      }\n      return i;\n    }\n  });\n}\nvar L;\n((L = window.HTMLSlotElement) === null || L === void 0 ? void 0 : L.prototype.assignedElements) != null ? (r, t) => r.assignedElements(t) : (r, t) => r.assignedNodes(t).filter(e => e.nodeType === Node.ELEMENT_NODE);\nvar I = {\n  name: \"@dotlottie/player-component\",\n  version: \"2.7.12\",\n  description: \"dotLottie animation player web component.\",\n  repository: \"https://github.com/dotlottie/player-component.git\",\n  homepage: \"https://dotlottie.io/players\",\n  bugs: \"https://github.com/dotlottie/player-component/issues\",\n  author: \"Jawish Hameed <jawish@lottiefiles.com>\",\n  license: \"MIT\",\n  main: \"dist/dotlottie-player.js\",\n  module: \"dist/dotlottie-player.mjs\",\n  types: \"dist/dotlottie-player.d.ts\",\n  files: [\"dist\"],\n  keywords: [\"dotlottie\", \"animation\", \"web component\", \"component\", \"lit-element\", \"player\"],\n  scripts: {\n    build: \"tsup\",\n    \"cypress:open\": \"cypress open --component\",\n    dev: \"tsup --watch\",\n    lint: \"eslint .\",\n    \"lint:fix\": \"eslint --fix\",\n    test: \"cypress run --component\",\n    \"type-check\": \"tsc --noEmit\"\n  },\n  dependencies: {\n    \"@dotlottie/common\": \"workspace:*\",\n    lit: \"^2.7.5\"\n  },\n  devDependencies: {\n    \"@vitejs/plugin-legacy\": \"^4.1.0\",\n    \"axe-core\": \"^4.7.2\",\n    cypress: \"^12.11.0\",\n    \"cypress-axe\": \"^1.4.0\",\n    \"cypress-ct-lit\": \"^0.3.2\",\n    \"lottie-web\": \"^5.12.2\",\n    terser: \"^5.19.0\",\n    tsup: \"^7.2.0\",\n    typescript: \"^4.7.4\",\n    vite: \"^4.3.9\"\n  },\n  publishConfig: {\n    access: \"public\"\n  },\n  browserslist: [\"> 3%\"]\n};\nvar T = \"dotlottie-player\";\nvar a = class extends b {\n  defaultTheme = \"\";\n  container;\n  playMode = (() => g.Normal)();\n  autoplay = (() => !1)();\n  background = \"transparent\";\n  controls = (() => !1)();\n  direction = 1;\n  hover = (() => !1)();\n  loop;\n  renderer = \"svg\";\n  speed = 1;\n  src;\n  intermission = 0;\n  activeAnimationId = null;\n  light = (() => !1)();\n  worker = (() => !1)();\n  activeStateId;\n  _seeker = 0;\n  _dotLottieCommonPlayer;\n  _io;\n  _loop;\n  _renderer = \"svg\";\n  _unsubscribeListeners;\n  _hasMultipleAnimations = (() => !1)();\n  _hasMultipleThemes = (() => !1)();\n  _hasMultipleStates = (() => !1)();\n  _popoverIsOpen = (() => !1)();\n  _animationsTabIsOpen = (() => !1)();\n  _statesTabIsOpen = (() => !1)();\n  _styleTabIsOpen = (() => !1)();\n  _themesForCurrentAnimation = [];\n  _statesForCurrentAnimation = [];\n  _parseLoop(t) {\n    let e = parseInt(t, 10);\n    return Number.isInteger(e) && e > 0 ? (this._loop = e, e) : typeof t == \"string\" && [\"true\", \"false\"].includes(t) ? (this._loop = t === \"true\", this._loop) : (c(\"loop must be a positive integer or a boolean\"), !1);\n  }\n  _handleSeekChange(t) {\n    let e = t.currentTarget;\n    try {\n      let i = parseInt(e.value, 10);\n      if (!this._dotLottieCommonPlayer) return;\n      let n = i / 100 * this._dotLottieCommonPlayer.totalFrames;\n      this.seek(n);\n    } catch {\n      throw a$2(\"Error while seeking animation\");\n    }\n  }\n  _initListeners() {\n    let t = this._dotLottieCommonPlayer;\n    if (t === void 0) {\n      c(\"player not initialized - cannot add event listeners\", \"dotlottie-player-component\");\n      return;\n    }\n    this._unsubscribeListeners = t.state.subscribe((e$1, i) => {\n      this._seeker = e$1.seeker, this.requestUpdate(), i.currentState !== e$1.currentState && this.dispatchEvent(new CustomEvent(e$1.currentState)), this.dispatchEvent(new CustomEvent(e.Frame, {\n        detail: {\n          frame: e$1.frame,\n          seeker: e$1.seeker\n        }\n      })), this.dispatchEvent(new CustomEvent(e.VisibilityChange, {\n        detail: {\n          visibilityPercentage: e$1.visibilityPercentage\n        }\n      }));\n    }), t.addEventListener(\"complete\", () => {\n      this.dispatchEvent(new CustomEvent(e.Complete));\n    }), t.addEventListener(\"loopComplete\", () => {\n      this.dispatchEvent(new CustomEvent(e.LoopComplete));\n    }), t.addEventListener(\"DOMLoaded\", () => {\n      let e$1 = this.getManifest();\n      e$1 && e$1.themes && (this._themesForCurrentAnimation = e$1.themes.filter(i => i.animations.includes(this.getCurrentAnimationId() || \"\"))), e$1 && e$1.states && (this._hasMultipleStates = e$1.states.length > 0, this._statesForCurrentAnimation = [], e$1.states.forEach(i => {\n        this._statesForCurrentAnimation.push(i);\n      })), this.dispatchEvent(new CustomEvent(e.Ready));\n    }), t.addEventListener(\"data_ready\", () => {\n      this.dispatchEvent(new CustomEvent(e.DataReady));\n    }), t.addEventListener(\"data_failed\", () => {\n      this.dispatchEvent(new CustomEvent(e.DataFail));\n    }), window && window.addEventListener(\"click\", e => this._clickOutListener(e));\n  }\n  async load(t, e, i) {\n    if (!this.shadowRoot) return;\n    this._dotLottieCommonPlayer && this._dotLottieCommonPlayer.destroy(), this._dotLottieCommonPlayer = new j(t, this.container, {\n      rendererSettings: e != null ? e : {\n        scaleMode: \"noScale\",\n        clearCanvas: !0,\n        progressiveLoad: !0,\n        hideOnTransparent: !0\n      },\n      hover: this.hasAttribute(\"hover\") ? this.hover : void 0,\n      renderer: this.hasAttribute(\"renderer\") ? this._renderer : void 0,\n      loop: this.hasAttribute(\"loop\") ? this._loop : void 0,\n      direction: this.hasAttribute(\"direction\") ? this.direction === 1 ? 1 : -1 : void 0,\n      speed: this.hasAttribute(\"speed\") ? this.speed : void 0,\n      intermission: this.hasAttribute(\"intermission\") ? Number(this.intermission) : void 0,\n      playMode: this.hasAttribute(\"playMode\") ? this.playMode : void 0,\n      autoplay: this.hasAttribute(\"autoplay\") ? this.autoplay : void 0,\n      activeAnimationId: this.hasAttribute(\"activeAnimationId\") ? this.activeAnimationId : void 0,\n      defaultTheme: this.hasAttribute(\"defaultTheme\") ? this.defaultTheme : void 0,\n      light: this.light,\n      worker: this.worker,\n      activeStateId: this.hasAttribute(\"activeStateId\") ? this.activeStateId : void 0\n    }), await this._dotLottieCommonPlayer.load(i);\n    let n = this.getManifest();\n    this._hasMultipleAnimations = this.animationCount() > 1, n && (n.themes && (this._themesForCurrentAnimation = n.themes.filter(l => l.animations.includes(this.getCurrentAnimationId() || \"\")), this._hasMultipleThemes = n.themes.length > 0), n.states && (this._hasMultipleStates = n.states.length > 0, this._statesForCurrentAnimation = [], n.states.forEach(l => {\n      this._statesForCurrentAnimation.push(l);\n    }))), this._initListeners();\n  }\n  getCurrentAnimationId() {\n    var t;\n    return (t = this._dotLottieCommonPlayer) == null ? void 0 : t.currentAnimationId;\n  }\n  animationCount() {\n    var t;\n    return this._dotLottieCommonPlayer && ((t = this._dotLottieCommonPlayer.getManifest()) == null ? void 0 : t.animations.length) || 0;\n  }\n  animations() {\n    if (!this._dotLottieCommonPlayer) return [];\n    let t = this._dotLottieCommonPlayer.getManifest();\n    return (t == null ? void 0 : t.animations.map(e => e.id)) || [];\n  }\n  currentAnimation() {\n    return !this._dotLottieCommonPlayer || !this._dotLottieCommonPlayer.currentAnimationId ? \"\" : this._dotLottieCommonPlayer.currentAnimationId;\n  }\n  getState() {\n    return this._dotLottieCommonPlayer ? this._dotLottieCommonPlayer.getState() : i;\n  }\n  getManifest() {\n    var t;\n    return (t = this._dotLottieCommonPlayer) == null ? void 0 : t.getManifest();\n  }\n  getLottie() {\n    var t;\n    return (t = this._dotLottieCommonPlayer) == null ? void 0 : t.getAnimationInstance();\n  }\n  getVersions() {\n    return {\n      lottieWebVersion: j.getLottieWebVersion(),\n      dotLottiePlayerVersion: `${I.version}`\n    };\n  }\n  previous(t) {\n    var e;\n    (e = this._dotLottieCommonPlayer) == null || e.previous(t);\n  }\n  next(t) {\n    var e;\n    (e = this._dotLottieCommonPlayer) == null || e.next(t);\n  }\n  reset() {\n    var t;\n    (t = this._dotLottieCommonPlayer) == null || t.reset();\n  }\n  play(t, e) {\n    this._dotLottieCommonPlayer && this._dotLottieCommonPlayer.play(t, e);\n  }\n  pause() {\n    this._dotLottieCommonPlayer && this._dotLottieCommonPlayer.pause();\n  }\n  stop() {\n    this._dotLottieCommonPlayer && this._dotLottieCommonPlayer.stop();\n  }\n  playOnShow(t) {\n    this._dotLottieCommonPlayer && this._dotLottieCommonPlayer.playOnShow(t);\n  }\n  stopPlayOnShow() {\n    this._dotLottieCommonPlayer && this._dotLottieCommonPlayer.stopPlayOnShow();\n  }\n  playOnScroll(t) {\n    this._dotLottieCommonPlayer && this._dotLottieCommonPlayer.playOnScroll(t);\n  }\n  stopPlayOnScroll() {\n    this._dotLottieCommonPlayer && this._dotLottieCommonPlayer.stopPlayOnScroll();\n  }\n  seek(t) {\n    this._dotLottieCommonPlayer && this._dotLottieCommonPlayer.seek(t);\n  }\n  snapshot() {\n    let t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !0;\n    if (!this.shadowRoot) return \"\";\n    let e = this.shadowRoot.querySelector(\".animation svg\"),\n      i = new XMLSerializer().serializeToString(e);\n    if (t) {\n      let n = document.createElement(\"a\");\n      n.href = `data:image/svg+xml;charset=utf-8,${encodeURIComponent(i)}`, n.download = `download_${this._seeker}.svg`, document.body.appendChild(n), n.click(), document.body.removeChild(n);\n    }\n    return i;\n  }\n  setTheme(t) {\n    var e;\n    (e = this._dotLottieCommonPlayer) == null || e.setDefaultTheme(t);\n  }\n  themes() {\n    var e;\n    if (!this._dotLottieCommonPlayer) return [];\n    let t = this._dotLottieCommonPlayer.getManifest();\n    return ((e = t == null ? void 0 : t.themes) == null ? void 0 : e.map(i => i.id)) || [];\n  }\n  getDefaultTheme() {\n    return this._dotLottieCommonPlayer ? this._dotLottieCommonPlayer.defaultTheme : \"\";\n  }\n  getActiveStateMachine() {\n    return this._dotLottieCommonPlayer ? this._dotLottieCommonPlayer.activeStateId : \"\";\n  }\n  _freeze() {\n    this._dotLottieCommonPlayer && this._dotLottieCommonPlayer.freeze();\n  }\n  setSpeed() {\n    let t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    this._dotLottieCommonPlayer && this._dotLottieCommonPlayer.setSpeed(t);\n  }\n  setDirection(t) {\n    this._dotLottieCommonPlayer && this._dotLottieCommonPlayer.setDirection(t);\n  }\n  setLooping(t) {\n    this._dotLottieCommonPlayer && this._dotLottieCommonPlayer.setLoop(t);\n  }\n  isLooping() {\n    return this._dotLottieCommonPlayer ? this._dotLottieCommonPlayer.loop : !1;\n  }\n  togglePlay() {\n    this._dotLottieCommonPlayer && this._dotLottieCommonPlayer.togglePlay();\n  }\n  toggleLooping() {\n    this._dotLottieCommonPlayer && this._dotLottieCommonPlayer.toggleLoop();\n  }\n  setPlayMode(t) {\n    this._dotLottieCommonPlayer && this._dotLottieCommonPlayer.setMode(t);\n  }\n  enterInteractiveMode(t) {\n    this._dotLottieCommonPlayer && this._dotLottieCommonPlayer.enterInteractiveMode(t);\n  }\n  exitInteractiveMode() {\n    this._dotLottieCommonPlayer && this._dotLottieCommonPlayer.exitInteractiveMode();\n  }\n  revertToManifestValues(t) {\n    var e;\n    (e = this._dotLottieCommonPlayer) == null || e.revertToManifestValues(t);\n  }\n  static get styles() {\n    return c$1;\n  }\n  async firstUpdated() {\n    var t;\n    this.container = (t = this.shadowRoot) == null ? void 0 : t.querySelector(\"#animation\"), \"IntersectionObserver\" in window && (this._io = new IntersectionObserver(e => {\n      var i, n;\n      e[0] !== void 0 && e[0].isIntersecting ? ((i = this._dotLottieCommonPlayer) == null ? void 0 : i.currentState) === f.Frozen && this.play() : ((n = this._dotLottieCommonPlayer) == null ? void 0 : n.currentState) === f.Playing && this._freeze();\n    }), this._io.observe(this.container)), this.loop ? this._parseLoop(this.loop) : this.hasAttribute(\"loop\") && this._parseLoop(\"true\"), this.renderer === \"svg\" ? this._renderer = \"svg\" : this.renderer === \"canvas\" ? this._renderer = \"canvas\" : this.renderer === \"html\" && (this._renderer = \"html\"), this.src && (await this.load(this.src));\n  }\n  disconnectedCallback() {\n    var t, e;\n    this._io && (this._io.disconnect(), this._io = void 0), (t = this._dotLottieCommonPlayer) == null || t.destroy(), (e = this._unsubscribeListeners) == null || e.call(this), window && window.removeEventListener(\"click\", i => this._clickOutListener(i));\n  }\n  _clickOutListener(t) {\n    !t.composedPath().some(i => i instanceof HTMLElement ? i.classList.contains(\"popover\") || i.id === \"lottie-animation-options\" : !1) && this._popoverIsOpen && (this._popoverIsOpen = !1, this.requestUpdate());\n  }\n  renderControls() {\n    var i, n, l, h, b;\n    let t = ((i = this._dotLottieCommonPlayer) == null ? void 0 : i.currentState) === f.Playing,\n      e = ((n = this._dotLottieCommonPlayer) == null ? void 0 : n.currentState) === f.Paused;\n    return a$3`\n      <div id=\"lottie-controls\" aria-label=\"lottie-animation-controls\" class=\"toolbar\">\n        ${this._hasMultipleAnimations ? a$3`\n              <button @click=${() => this.previous()} aria-label=\"Previous animation\" class=\"btn-spacing-left\">\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path\n                    fill-rule=\"evenodd\"\n                    clip-rule=\"evenodd\"\n                    d=\"M1.69214 13.5C1.69214 13.7761 1.916 14 2.19214 14C2.46828 14 2.69214 13.7761 2.69214 13.5L2.69214 2.5C2.69214 2.22386 2.46828 2 2.19214 2C1.916 2 1.69214 2.22386 1.69214 2.5V13.5ZM12.5192 13.7828C13.1859 14.174 14.0254 13.6933 14.0254 12.9204L14.0254 3.0799C14.0254 2.30692 13.1859 1.8262 12.5192 2.21747L4.13612 7.13769C3.47769 7.52414 3.47769 8.4761 4.13612 8.86255L12.5192 13.7828Z\"\n                    fill=\"#20272C\"\n                  />\n                </svg>\n              </button>\n            ` : a$3``}\n        <button\n          id=\"lottie-play-button\"\n          @click=${() => {\n      this.togglePlay();\n    }}\n          class=${t || e ? `active ${this._hasMultipleAnimations ? \"btn-spacing-center\" : \"btn-spacing-right\"}` : `${this._hasMultipleAnimations ? \"btn-spacing-center\" : \"btn-spacing-right\"}`}\n          aria-label=\"play / pause animation\"\n        >\n          ${t ? a$3`\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path\n                    d=\"M3.99996 2C3.26358 2 2.66663 2.59695 2.66663 3.33333V12.6667C2.66663 13.403 3.26358 14 3.99996 14H5.33329C6.06967 14 6.66663 13.403 6.66663 12.6667V3.33333C6.66663 2.59695 6.06967 2 5.33329 2H3.99996Z\"\n                    fill=\"#20272C\"\n                  />\n                  <path\n                    d=\"M10.6666 2C9.93025 2 9.33329 2.59695 9.33329 3.33333V12.6667C9.33329 13.403 9.93025 14 10.6666 14H12C12.7363 14 13.3333 13.403 13.3333 12.6667V3.33333C13.3333 2.59695 12.7363 2 12 2H10.6666Z\"\n                    fill=\"#20272C\"\n                  />\n                </svg>\n              ` : a$3`\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path\n                    d=\"M3.33337 3.46787C3.33337 2.52312 4.35948 1.93558 5.17426 2.41379L12.8961 6.94592C13.7009 7.41824 13.7009 8.58176 12.8961 9.05408L5.17426 13.5862C4.35948 14.0644 3.33337 13.4769 3.33337 12.5321V3.46787Z\"\n                    fill=\"#20272C\"\n                  />\n                </svg>\n              `}\n        </button>\n        ${this._hasMultipleAnimations ? a$3`\n              <button @click=${() => this.next()} aria-label=\"Next animation\" class=\"btn-spacing-right\">\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path\n                    fill-rule=\"evenodd\"\n                    clip-rule=\"evenodd\"\n                    d=\"M14.3336 2.5C14.3336 2.22386 14.1097 2 13.8336 2C13.5574 2 13.3336 2.22386 13.3336 2.5V13.5C13.3336 13.7761 13.5574 14 13.8336 14C14.1097 14 14.3336 13.7761 14.3336 13.5V2.5ZM3.50618 2.21722C2.83954 1.82595 2 2.30667 2 3.07965V12.9201C2 13.6931 2.83954 14.1738 3.50618 13.7825L11.8893 8.86231C12.5477 8.47586 12.5477 7.52389 11.8893 7.13745L3.50618 2.21722Z\"\n                    fill=\"#20272C\"\n                  />\n                </svg>\n              </button>\n            ` : a$3``}\n        <input\n          id=\"lottie-seeker-input\"\n          class=\"seeker ${((l = this._dotLottieCommonPlayer) == null ? void 0 : l.direction) === -1 ? \"to-left\" : \"\"}\"\n          type=\"range\"\n          min=\"0\"\n          step=\"1\"\n          max=\"100\"\n          .value=${this._seeker}\n          @input=${s => this._handleSeekChange(s)}\n          @mousedown=${() => {\n      this._freeze();\n    }}\n          @mouseup=${() => {\n      var s;\n      (s = this._dotLottieCommonPlayer) == null || s.unfreeze();\n    }}\n          aria-valuemin=\"1\"\n          aria-valuemax=\"100\"\n          role=\"slider\"\n          aria-valuenow=${this._seeker}\n          aria-label=\"lottie-seek-input\"\n          style=${`--seeker: ${this._seeker}`}\n        />\n        <button\n          id=\"lottie-loop-toggle\"\n          @click=${() => this.toggleLooping()}\n          class=${(h = this._dotLottieCommonPlayer) != null && h.loop ? \"active btn-spacing-left\" : \"btn-spacing-left\"}\n          aria-label=\"loop-toggle\"\n        >\n          <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path\n              d=\"M10.8654 2.31319C11.0607 2.11793 11.3772 2.11793 11.5725 2.31319L13.4581 4.19881C13.6534 4.39407 13.6534 4.71066 13.4581 4.90592L11.5725 6.79154C11.3772 6.9868 11.0607 6.9868 10.8654 6.79154C10.6701 6.59628 10.6701 6.27969 10.8654 6.08443L11.6162 5.33362H4V6.66695C4 7.03514 3.70152 7.33362 3.33333 7.33362C2.96514 7.33362 2.66666 7.03514 2.66666 6.66695L2.66666 4.66695C2.66666 4.29876 2.96514 4.00028 3.33333 4.00028H11.8454L10.8654 3.0203C10.6701 2.82504 10.6701 2.50846 10.8654 2.31319Z\"\n              fill=\"currentColor\"\n            />\n            <path\n              d=\"M12.4375 11.9999C12.8057 11.9999 13.1042 11.7014 13.1042 11.3332V9.33321C13.1042 8.96502 12.8057 8.66655 12.4375 8.66655C12.0693 8.66655 11.7708 8.96502 11.7708 9.33321V10.6665H4.15462L4.90543 9.91573C5.10069 9.72047 5.10069 9.40389 4.90543 9.20862C4.71017 9.01336 4.39359 9.01336 4.19832 9.20862L2.31271 11.0942C2.11744 11.2895 2.11744 11.6061 2.31271 11.8013L4.19832 13.687C4.39359 13.8822 4.71017 13.8822 4.90543 13.687C5.10069 13.4917 5.10069 13.1751 4.90543 12.9799L3.92545 11.9999H12.4375Z\"\n              fill=\"currentColor\"\n            />\n          </svg>\n        </button>\n        ${this._hasMultipleAnimations || this._hasMultipleThemes || this._hasMultipleStates ? a$3`\n              <button\n                id=\"lottie-animation-options\"\n                @click=${() => {\n      this._popoverIsOpen = !this._popoverIsOpen, this.requestUpdate();\n    }}\n                aria-label=\"options\"\n                class=\"btn-spacing-right\"\n                style=${`background-color: ${this._popoverIsOpen ? \"var(--lottie-player-toolbar-icon-hover-color)\" : \"\"}`}\n              >\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path\n                    d=\"M8.33337 11.6666C7.78109 11.6666 7.33337 12.1143 7.33337 12.6666C7.33337 13.2189 7.78109 13.6666 8.33337 13.6666C8.88566 13.6666 9.33337 13.2189 9.33337 12.6666C9.33337 12.1143 8.88566 11.6666 8.33337 11.6666Z\"\n                    fill=\"#20272C\"\n                  />\n                  <path\n                    d=\"M7.33337 7.99992C7.33337 7.44763 7.78109 6.99992 8.33337 6.99992C8.88566 6.99992 9.33338 7.44763 9.33338 7.99992C9.33338 8.5522 8.88566 8.99992 8.33337 8.99992C7.78109 8.99992 7.33337 8.5522 7.33337 7.99992Z\"\n                    fill=\"#20272C\"\n                  />\n                  <path\n                    d=\"M7.33337 3.33325C7.33337 2.78097 7.78109 2.33325 8.33337 2.33325C8.88566 2.33325 9.33338 2.78097 9.33338 3.33325C9.33338 3.88554 8.88566 4.33325 8.33337 4.33325C7.78109 4.33325 7.33337 3.88554 7.33337 3.33325Z\"\n                    fill=\"#20272C\"\n                  />\n                </svg>\n              </button>\n            ` : a$3``}\n      </div>\n      ${this._popoverIsOpen ? a$3`\n            <div\n              id=\"popover\"\n              class=\"popover\"\n              tabindex=\"0\"\n              aria-label=\"lottie animations themes popover\"\n              style=\"min-height: ${this.themes().length > 0 ? \"84px\" : \"auto\"}\"\n            >\n              ${!this._animationsTabIsOpen && !this._styleTabIsOpen && !this._statesTabIsOpen ? a$3`\n                    <button\n                      class=\"popover-button\"\n                      tabindex=\"0\"\n                      aria-label=\"animations\"\n                      @click=${() => {\n      this._animationsTabIsOpen = !this._animationsTabIsOpen, this.requestUpdate();\n    }}\n                      @keydown=${s => {\n      (s.code === \"Space\" || s.code === \"Enter\") && (this._animationsTabIsOpen = !this._animationsTabIsOpen, this.requestUpdate());\n    }}\n                    >\n                      <div class=\"popover-button-text\">Animations</div>\n                      <div>\n                        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                          <path\n                            fill-rule=\"evenodd\"\n                            clip-rule=\"evenodd\"\n                            d=\"M10.4697 17.5303C10.1768 17.2374 10.1768 16.7626 10.4697 16.4697L14.9393 12L10.4697 7.53033C10.1768 7.23744 10.1768 6.76256 10.4697 6.46967C10.7626 6.17678 11.2374 6.17678 11.5303 6.46967L16.5303 11.4697C16.8232 11.7626 16.8232 12.2374 16.5303 12.5303L11.5303 17.5303C11.2374 17.8232 10.7626 17.8232 10.4697 17.5303Z\"\n                            fill=\"#4C5863\"\n                          />\n                        </svg>\n                      </div>\n                    </button>\n                  ` : a$3``}\n              ${this._hasMultipleThemes && !this._styleTabIsOpen && !this._animationsTabIsOpen && !this._statesTabIsOpen ? a$3` <button\n                    class=\"popover-button\"\n                    aria-label=\"Themes\"\n                    @click=${() => {\n      this._styleTabIsOpen = !this._styleTabIsOpen, this.requestUpdate();\n    }}\n                    @keydown=${s => {\n      (s.code === \"Space\" || s.code === \"Enter\") && (this._styleTabIsOpen = !this._styleTabIsOpen, this.requestUpdate());\n    }}\n                  >\n                    <div class=\"popover-button-text\">Themes</div>\n                    <div>\n                      <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path\n                          fill-rule=\"evenodd\"\n                          clip-rule=\"evenodd\"\n                          d=\"M10.4697 17.5303C10.1768 17.2374 10.1768 16.7626 10.4697 16.4697L14.9393 12L10.4697 7.53033C10.1768 7.23744 10.1768 6.76256 10.4697 6.46967C10.7626 6.17678 11.2374 6.17678 11.5303 6.46967L16.5303 11.4697C16.8232 11.7626 16.8232 12.2374 16.5303 12.5303L11.5303 17.5303C11.2374 17.8232 10.7626 17.8232 10.4697 17.5303Z\"\n                          fill=\"#4C5863\"\n                        />\n                      </svg>\n                    </div>\n                  </button>` : \"\"}\n              ${this._hasMultipleStates && !this._styleTabIsOpen && !this._animationsTabIsOpen && !this._statesTabIsOpen ? a$3` <button\n                    class=\"popover-button\"\n                    aria-label=\"States\"\n                    @click=${() => {\n      this._statesTabIsOpen = !this._statesTabIsOpen, this.requestUpdate();\n    }}\n                    @keydown=${s => {\n      (s.code === \"Space\" || s.code === \"Enter\") && (this._statesTabIsOpen = !this._statesTabIsOpen, this.requestUpdate());\n    }}\n                  >\n                    <div class=\"popover-button-text\">States</div>\n                    <div>\n                      <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path\n                          fill-rule=\"evenodd\"\n                          clip-rule=\"evenodd\"\n                          d=\"M10.4697 17.5303C10.1768 17.2374 10.1768 16.7626 10.4697 16.4697L14.9393 12L10.4697 7.53033C10.1768 7.23744 10.1768 6.76256 10.4697 6.46967C10.7626 6.17678 11.2374 6.17678 11.5303 6.46967L16.5303 11.4697C16.8232 11.7626 16.8232 12.2374 16.5303 12.5303L11.5303 17.5303C11.2374 17.8232 10.7626 17.8232 10.4697 17.5303Z\"\n                          fill=\"#4C5863\"\n                        />\n                      </svg>\n                    </div>\n                  </button>` : \"\"}\n              ${this._animationsTabIsOpen ? a$3`<button\n                      class=\"option-title-button\"\n                      aria-label=\"Back to main popover menu\"\n                      @click=${() => {\n      this._animationsTabIsOpen = !this._animationsTabIsOpen, this.requestUpdate();\n    }}\n                    >\n                      <div class=\"option-title-chevron\">\n                        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                          <path\n                            fill-rule=\"evenodd\"\n                            clip-rule=\"evenodd\"\n                            d=\"M13.5303 6.46967C13.8232 6.76256 13.8232 7.23744 13.5303 7.53033L9.06066 12L13.5303 16.4697C13.8232 16.7626 13.8232 17.2374 13.5303 17.5303C13.2374 17.8232 12.7626 17.8232 12.4697 17.5303L7.46967 12.5303C7.17678 12.2374 7.17678 11.7626 7.46967 11.4697L12.4697 6.46967C12.7626 6.17678 13.2374 6.17678 13.5303 6.46967Z\"\n                            fill=\"#20272C\"\n                          />\n                        </svg>\n                      </div>\n                      <div>Animations</div>\n                    </button>\n                    <div class=\"option-title-separator\"></div>\n                    <div class=\"option-row\">\n                      <ul>\n                        ${this.animations().map(s => a$3`\n                            <li>\n                              <button\n                                class=\"option-button\"\n                                aria-label=${`${s}`}\n                                @click=${() => {\n      this._animationsTabIsOpen = !this._animationsTabIsOpen, this._popoverIsOpen = !this._popoverIsOpen, this.play(s), this.requestUpdate();\n    }}\n                                @keydown=${c => {\n      (c.code === \"Space\" || c.code === \"Enter\") && (this._animationsTabIsOpen = !this._animationsTabIsOpen, this._popoverIsOpen = !this._popoverIsOpen, this.play(s), this.requestUpdate());\n    }}\n                              >\n                                <div class=\"option-tick\">\n                                  ${this.currentAnimation() === s ? a$3`\n                                        <svg\n                                          width=\"24\"\n                                          height=\"24\"\n                                          viewBox=\"0 0 24 24\"\n                                          fill=\"none\"\n                                          xmlns=\"http://www.w3.org/2000/svg\"\n                                        >\n                                          <path\n                                            fill-rule=\"evenodd\"\n                                            clip-rule=\"evenodd\"\n                                            d=\"M20.5281 5.9372C20.821 6.23009 20.821 6.70497 20.5281 6.99786L9.46297 18.063C9.32168 18.2043 9.12985 18.2833 8.93004 18.2826C8.73023 18.2819 8.53895 18.2015 8.39864 18.0593L3.46795 13.0596C3.1771 12.7647 3.1804 12.2898 3.47532 11.999C3.77024 11.7081 4.2451 11.7114 4.53595 12.0063L8.93634 16.4683L19.4675 5.9372C19.7604 5.64431 20.2352 5.64431 20.5281 5.9372Z\"\n                                            fill=\"#20272C\"\n                                          />\n                                        </svg>\n                                      ` : a$3`<div style=\"width: 24px; height: 24px\"></div>`}\n                                </div>\n                                <div>${s}</div>\n                              </button>\n                            </li>\n                          `)}\n                      </ul>\n                    </div> ` : a$3``}\n              ${this._styleTabIsOpen ? a$3`<div class=\"option-title-themes-row\">\n                      <button\n                        class=\"option-title-button themes\"\n                        aria-label=\"Back to main popover menu\"\n                        @click=${() => {\n      this._styleTabIsOpen = !this._styleTabIsOpen, this.requestUpdate();\n    }}\n                      >\n                        <div class=\"option-title-chevron\">\n                          <svg\n                            width=\"24\"\n                            height=\"24\"\n                            viewBox=\"0 0 24 24\"\n                            fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                          >\n                            <path\n                              fill-rule=\"evenodd\"\n                              clip-rule=\"evenodd\"\n                              d=\"M13.5303 6.46967C13.8232 6.76256 13.8232 7.23744 13.5303 7.53033L9.06066 12L13.5303 16.4697C13.8232 16.7626 13.8232 17.2374 13.5303 17.5303C13.2374 17.8232 12.7626 17.8232 12.4697 17.5303L7.46967 12.5303C7.17678 12.2374 7.17678 11.7626 7.46967 11.4697L12.4697 6.46967C12.7626 6.17678 13.2374 6.17678 13.5303 6.46967Z\"\n                              fill=\"#20272C\"\n                            />\n                          </svg>\n                        </div>\n                        <div class=\"option-title-text\">Themes</div>\n                        ${((b = this._dotLottieCommonPlayer) == null ? void 0 : b.defaultTheme) === \"\" ? a$3`` : a$3`\n                              <button\n                                class=\"reset-btn\"\n                                @click=${() => {\n      this.setTheme(\"\"), this.requestUpdate();\n    }}\n                              >\n                                Reset\n                              </button>\n                            `}\n                      </button>\n                    </div>\n                    <div class=\"option-title-separator\"></div>\n                    <div class=\"option-row\">\n                      <ul>\n                        ${this._themesForCurrentAnimation.map(s => a$3`\n                            <li>\n                              <button\n                                class=\"option-button\"\n                                aria-label=\"${s.id}\"\n                                @click=${() => {\n      this.setTheme(s.id);\n    }}\n                                @keydown=${c => {\n      (c.code === \"Space\" || c.code === \"Enter\") && this.setTheme(s.id);\n    }}\n                              >\n                                <div class=\"option-tick\">\n                                  ${this.getDefaultTheme() === s.id ? a$3`\n                                        <svg\n                                          width=\"24\"\n                                          height=\"24\"\n                                          viewBox=\"0 0 24 24\"\n                                          fill=\"none\"\n                                          xmlns=\"http://www.w3.org/2000/svg\"\n                                        >\n                                          <path\n                                            fill-rule=\"evenodd\"\n                                            clip-rule=\"evenodd\"\n                                            d=\"M20.5281 5.9372C20.821 6.23009 20.821 6.70497 20.5281 6.99786L9.46297 18.063C9.32168 18.2043 9.12985 18.2833 8.93004 18.2826C8.73023 18.2819 8.53895 18.2015 8.39864 18.0593L3.46795 13.0596C3.1771 12.7647 3.1804 12.2898 3.47532 11.999C3.77024 11.7081 4.2451 11.7114 4.53595 12.0063L8.93634 16.4683L19.4675 5.9372C19.7604 5.64431 20.2352 5.64431 20.5281 5.9372Z\"\n                                            fill=\"#20272C\"\n                                          />\n                                        </svg>\n                                      ` : a$3`<div style=\"width: 24px; height: 24px\"></div>`}\n                                </div>\n                                <div>${s.id}</div>\n                              </button>\n                            </li>\n                          `)}\n                      </ul>\n                    </div>` : a$3``}\n              ${this._statesTabIsOpen ? a$3`<div class=\"option-title-themes-row\">\n                      <button\n                        class=\"option-title-button themes\"\n                        aria-label=\"Back to main popover menu\"\n                        @click=${() => {\n      this._statesTabIsOpen = !this._statesTabIsOpen, this.requestUpdate();\n    }}\n                      >\n                        <div class=\"option-title-chevron\">\n                          <svg\n                            width=\"24\"\n                            height=\"24\"\n                            viewBox=\"0 0 24 24\"\n                            fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                          >\n                            <path\n                              fill-rule=\"evenodd\"\n                              clip-rule=\"evenodd\"\n                              d=\"M13.5303 6.46967C13.8232 6.76256 13.8232 7.23744 13.5303 7.53033L9.06066 12L13.5303 16.4697C13.8232 16.7626 13.8232 17.2374 13.5303 17.5303C13.2374 17.8232 12.7626 17.8232 12.4697 17.5303L7.46967 12.5303C7.17678 12.2374 7.17678 11.7626 7.46967 11.4697L12.4697 6.46967C12.7626 6.17678 13.2374 6.17678 13.5303 6.46967Z\"\n                              fill=\"#20272C\"\n                            />\n                          </svg>\n                        </div>\n                        <div class=\"option-title-text\">States</div>\n                        <button\n                          class=\"reset-btn\"\n                          @click=${() => {\n      this.exitInteractiveMode(), this.requestUpdate();\n    }}\n                        >\n                          Reset\n                        </button>\n                      </button>\n                    </div>\n                    <div class=\"option-title-separator\"></div>\n                    <div class=\"option-row\">\n                      <ul>\n                        ${this._statesForCurrentAnimation.map(s => a$3`\n                            <li>\n                              <button\n                                class=\"option-button\"\n                                aria-label=\"${s}\"\n                                @click=${() => {\n      this.enterInteractiveMode(s);\n    }}\n                                @keydown=${c => {\n      (c.code === \"Space\" || c.code === \"Enter\") && this.enterInteractiveMode(s);\n    }}\n                              >\n                                <div class=\"option-tick\">\n                                  ${this.getActiveStateMachine() === s ? a$3`\n                                        <svg\n                                          width=\"24\"\n                                          height=\"24\"\n                                          viewBox=\"0 0 24 24\"\n                                          fill=\"none\"\n                                          xmlns=\"http://www.w3.org/2000/svg\"\n                                        >\n                                          <path\n                                            fill-rule=\"evenodd\"\n                                            clip-rule=\"evenodd\"\n                                            d=\"M20.5281 5.9372C20.821 6.23009 20.821 6.70497 20.5281 6.99786L9.46297 18.063C9.32168 18.2043 9.12985 18.2833 8.93004 18.2826C8.73023 18.2819 8.53895 18.2015 8.39864 18.0593L3.46795 13.0596C3.1771 12.7647 3.1804 12.2898 3.47532 11.999C3.77024 11.7081 4.2451 11.7114 4.53595 12.0063L8.93634 16.4683L19.4675 5.9372C19.7604 5.64431 20.2352 5.64431 20.5281 5.9372Z\"\n                                            fill=\"#20272C\"\n                                          />\n                                        </svg>\n                                      ` : a$3`<div style=\"width: 24px; height: 24px\"></div>`}\n                                </div>\n                                <div>${s}</div>\n                              </button>\n                            </li>\n                          `)}\n                      </ul>\n                    </div>` : a$3``}\n            </div>\n          ` : a$3``}\n    `;\n  }\n  render() {\n    var i;\n    let t = this.controls ? \"main controls\" : \"main\",\n      e = this.controls ? \"animation controls\" : \"animation\";\n    return a$3`\n      <div id=\"animation-container\" class=${t} lang=\"en\" role=\"img\" aria-label=\"lottie-animation-container\">\n        <div id=\"animation\" class=${e} style=\"background:${this.background};\">\n          ${((i = this._dotLottieCommonPlayer) == null ? void 0 : i.currentState) === f.Error ? a$3` <div class=\"error\">⚠️</div> ` : void 0}\n        </div>\n        ${this.controls ? this.renderControls() : void 0}\n      </div>\n    `;\n  }\n};\na$1([p({\n  type: String\n})], a.prototype, \"defaultTheme\", 2), a$1([O(\"#animation\")], a.prototype, \"container\", 2), a$1([p()], a.prototype, \"playMode\", 2), a$1([p({\n  type: Boolean\n})], a.prototype, \"autoplay\", 2), a$1([p({\n  type: String\n})], a.prototype, \"background\", 2), a$1([p({\n  type: Boolean\n})], a.prototype, \"controls\", 2), a$1([p({\n  type: Number\n})], a.prototype, \"direction\", 2), a$1([p({\n  type: Boolean\n})], a.prototype, \"hover\", 2), a$1([p({\n  type: String\n})], a.prototype, \"loop\", 2), a$1([p({\n  type: String\n})], a.prototype, \"renderer\", 2), a$1([p({\n  type: Number\n})], a.prototype, \"speed\", 2), a$1([p({\n  type: String\n})], a.prototype, \"src\", 2), a$1([p()], a.prototype, \"intermission\", 2), a$1([p({\n  type: String\n})], a.prototype, \"activeAnimationId\", 2), a$1([p({\n  type: Boolean\n})], a.prototype, \"light\", 2), a$1([p({\n  type: Boolean\n})], a.prototype, \"worker\", 2), a$1([p({\n  type: String\n})], a.prototype, \"activeStateId\", 2), a$1([k()], a.prototype, \"_seeker\", 2);\ncustomElements.get(T) || customElements.define(T, a); /*! Bundled license information:\n                                                      @lit/reactive-element/decorators/custom-element.js:\n                                                      (**\n                                                      * @license\n                                                      * Copyright 2017 Google LLC\n                                                      * SPDX-License-Identifier: BSD-3-Clause\n                                                      *)\n                                                      @lit/reactive-element/decorators/property.js:\n                                                      (**\n                                                      * @license\n                                                      * Copyright 2017 Google LLC\n                                                      * SPDX-License-Identifier: BSD-3-Clause\n                                                      *)\n                                                      @lit/reactive-element/decorators/state.js:\n                                                      (**\n                                                      * @license\n                                                      * Copyright 2017 Google LLC\n                                                      * SPDX-License-Identifier: BSD-3-Clause\n                                                      *)\n                                                      @lit/reactive-element/decorators/base.js:\n                                                      (**\n                                                      * @license\n                                                      * Copyright 2017 Google LLC\n                                                      * SPDX-License-Identifier: BSD-3-Clause\n                                                      *)\n                                                      @lit/reactive-element/decorators/event-options.js:\n                                                      (**\n                                                      * @license\n                                                      * Copyright 2017 Google LLC\n                                                      * SPDX-License-Identifier: BSD-3-Clause\n                                                      *)\n                                                      @lit/reactive-element/decorators/query.js:\n                                                      (**\n                                                      * @license\n                                                      * Copyright 2017 Google LLC\n                                                      * SPDX-License-Identifier: BSD-3-Clause\n                                                      *)\n                                                      @lit/reactive-element/decorators/query-all.js:\n                                                      (**\n                                                      * @license\n                                                      * Copyright 2017 Google LLC\n                                                      * SPDX-License-Identifier: BSD-3-Clause\n                                                      *)\n                                                      @lit/reactive-element/decorators/query-async.js:\n                                                      (**\n                                                      * @license\n                                                      * Copyright 2017 Google LLC\n                                                      * SPDX-License-Identifier: BSD-3-Clause\n                                                      *)\n                                                      @lit/reactive-element/decorators/query-assigned-elements.js:\n                                                      (**\n                                                      * @license\n                                                      * Copyright 2021 Google LLC\n                                                      * SPDX-License-Identifier: BSD-3-Clause\n                                                      *)\n                                                      @lit/reactive-element/decorators/query-assigned-nodes.js:\n                                                      (**\n                                                      * @license\n                                                      * Copyright 2017 Google LLC\n                                                      * SPDX-License-Identifier: BSD-3-Clause\n                                                      *)\n                                                      */\n\nexport { a as DotLottiePlayer };\n//# sourceMappingURL=out.js.map","map":{"version":3,"names":["g","c","a","a$2","e","j","i","f","PlayMode","a$1","M","r","t","kind","descriptor","finisher","createProperty","key","Symbol","placement","originalKey","initializer","call","x","constructor","p","k","state","v","_ref","n","l","h","b","Object","defineProperty","O","get","renderRoot","querySelector","enumerable","configurable","L","window","HTMLSlotElement","prototype","assignedElements","assignedNodes","filter","nodeType","Node","ELEMENT_NODE","I","name","version","description","repository","homepage","bugs","author","license","main","module","types","files","keywords","scripts","build","dev","lint","test","dependencies","lit","devDependencies","cypress","terser","tsup","typescript","vite","publishConfig","access","browserslist","T","defaultTheme","container","playMode","Normal","autoplay","background","controls","direction","hover","loop","renderer","speed","src","intermission","activeAnimationId","light","worker","activeStateId","_seeker","_dotLottieCommonPlayer","_io","_loop","_renderer","_unsubscribeListeners","_hasMultipleAnimations","_hasMultipleThemes","_hasMultipleStates","_popoverIsOpen","_animationsTabIsOpen","_statesTabIsOpen","_styleTabIsOpen","_themesForCurrentAnimation","_statesForCurrentAnimation","_parseLoop","parseInt","Number","isInteger","includes","_handleSeekChange","currentTarget","value","totalFrames","seek","_initListeners","subscribe","e$1","seeker","requestUpdate","currentState","dispatchEvent","CustomEvent","Frame","detail","frame","VisibilityChange","visibilityPercentage","addEventListener","Complete","LoopComplete","getManifest","themes","animations","getCurrentAnimationId","states","length","forEach","push","Ready","DataReady","DataFail","_clickOutListener","load","shadowRoot","destroy","rendererSettings","scaleMode","clearCanvas","progressiveLoad","hideOnTransparent","hasAttribute","animationCount","currentAnimationId","map","id","currentAnimation","getState","getLottie","getAnimationInstance","getVersions","lottieWebVersion","getLottieWebVersion","dotLottiePlayerVersion","previous","next","reset","play","pause","stop","playOnShow","stopPlayOnShow","playOnScroll","stopPlayOnScroll","snapshot","arguments","undefined","XMLSerializer","serializeToString","document","createElement","href","encodeURIComponent","download","body","appendChild","click","removeChild","setTheme","setDefaultTheme","getDefaultTheme","getActiveStateMachine","_freeze","freeze","setSpeed","setDirection","setLooping","setLoop","isLooping","togglePlay","toggleLooping","toggleLoop","setPlayMode","setMode","enterInteractiveMode","exitInteractiveMode","revertToManifestValues","styles","c$1","firstUpdated","IntersectionObserver","isIntersecting","Frozen","Playing","observe","disconnectedCallback","disconnect","removeEventListener","composedPath","some","HTMLElement","classList","contains","renderControls","Paused","a$3","s","unfreeze","code","render"],"sources":["/Users/baijianqing/VSC/The-Retro-Retro-Game/node_modules/node_modules/.pnpm/@lit+reactive-element@1.6.3/node_modules/@lit/reactive-element/src/decorators/property.ts","/Users/baijianqing/VSC/The-Retro-Retro-Game/node_modules/node_modules/.pnpm/@lit+reactive-element@1.6.3/node_modules/@lit/reactive-element/src/decorators/state.ts","/Users/baijianqing/VSC/The-Retro-Retro-Game/node_modules/node_modules/.pnpm/@lit+reactive-element@1.6.3/node_modules/@lit/reactive-element/src/decorators/base.ts","/Users/baijianqing/VSC/The-Retro-Retro-Game/node_modules/node_modules/.pnpm/@lit+reactive-element@1.6.3/node_modules/@lit/reactive-element/src/decorators/query.ts","/Users/baijianqing/VSC/The-Retro-Retro-Game/node_modules/node_modules/.pnpm/@lit+reactive-element@1.6.3/node_modules/@lit/reactive-element/src/decorators/query-assigned-elements.ts","/Users/baijianqing/VSC/The-Retro-Retro-Game/node_modules/@dotlottie/player-component/package.json","/Users/baijianqing/VSC/The-Retro-Retro-Game/node_modules/@dotlottie/player-component/src/dotlottie-player.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\nimport {PropertyDeclaration, ReactiveElement} from '../reactive-element.js';\nimport {ClassElement} from './base.js';\n\nconst standardProperty = (\n  options: PropertyDeclaration,\n  element: ClassElement\n) => {\n  // When decorating an accessor, pass it through and add property metadata.\n  // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n  // stomp over the user's accessor.\n  if (\n    element.kind === 'method' &&\n    element.descriptor &&\n    !('value' in element.descriptor)\n  ) {\n    return {\n      ...element,\n      finisher(clazz: typeof ReactiveElement) {\n        clazz.createProperty(element.key, options);\n      },\n    };\n  } else {\n    // createProperty() takes care of defining the property, but we still\n    // must return some kind of descriptor, so return a descriptor for an\n    // unused prototype field. The finisher calls createProperty().\n    return {\n      kind: 'field',\n      key: Symbol(),\n      placement: 'own',\n      descriptor: {},\n      // store the original key so subsequent decorators have access to it.\n      originalKey: element.key,\n      // When @babel/plugin-proposal-decorators implements initializers,\n      // do this instead of the initializer below. See:\n      // https://github.com/babel/babel/issues/9260 extras: [\n      //   {\n      //     kind: 'initializer',\n      //     placement: 'own',\n      //     initializer: descriptor.initializer,\n      //   }\n      // ],\n      initializer(this: {[key: string]: unknown}) {\n        if (typeof element.initializer === 'function') {\n          this[element.key as string] = element.initializer.call(this);\n        }\n      },\n      finisher(clazz: typeof ReactiveElement) {\n        clazz.createProperty(element.key, options);\n      },\n    };\n  }\n};\n\nconst legacyProperty = (\n  options: PropertyDeclaration,\n  proto: Object,\n  name: PropertyKey\n) => {\n  (proto.constructor as typeof ReactiveElement).createProperty(name, options);\n};\n\n/**\n * A property decorator which creates a reactive property that reflects a\n * corresponding attribute value. When a decorated property is set\n * the element will update and render. A {@linkcode PropertyDeclaration} may\n * optionally be supplied to configure property features.\n *\n * This decorator should only be used for public fields. As public fields,\n * properties should be considered as primarily settable by element users,\n * either via attribute or the property itself.\n *\n * Generally, properties that are changed by the element should be private or\n * protected fields and should use the {@linkcode state} decorator.\n *\n * However, sometimes element code does need to set a public property. This\n * should typically only be done in response to user interaction, and an event\n * should be fired informing the user; for example, a checkbox sets its\n * `checked` property when clicked and fires a `changed` event. Mutating public\n * properties should typically not be done for non-primitive (object or array)\n * properties. In other cases when an element needs to manage state, a private\n * property decorated via the {@linkcode state} decorator should be used. When\n * needed, state properties can be initialized via public properties to\n * facilitate complex interactions.\n *\n * ```ts\n * class MyElement {\n *   @property({ type: Boolean })\n *   clicked = false;\n * }\n * ```\n * @category Decorator\n * @ExportDecoratedItems\n */\nexport function property(options?: PropertyDeclaration) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return (protoOrDescriptor: Object | ClassElement, name?: PropertyKey): any =>\n    name !== undefined\n      ? legacyProperty(options!, protoOrDescriptor as Object, name)\n      : standardProperty(options!, protoOrDescriptor as ClassElement);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {property} from './property.js';\n\nexport interface InternalPropertyDeclaration<Type = unknown> {\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n}\n\n/**\n * Declares a private or protected reactive property that still triggers\n * updates to the element when it changes. It does not reflect from the\n * corresponding attribute.\n *\n * Properties declared this way must not be used from HTML or HTML templating\n * systems, they're solely for properties internal to the element. These\n * properties may be renamed by optimization tools like closure compiler.\n * @category Decorator\n */\nexport function state(options?: InternalPropertyDeclaration) {\n  return property({\n    ...options,\n    state: true,\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ReactiveElement} from '../reactive-element.js';\n\n/**\n * Generates a public interface type that removes private and protected fields.\n * This allows accepting otherwise compatible versions of the type (e.g. from\n * multiple copies of the same package in `node_modules`).\n */\nexport type Interface<T> = {\n  [K in keyof T]: T[K];\n};\n\nexport type Constructor<T> = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  new (...args: any[]): T;\n};\n\n// From the TC39 Decorators proposal\nexport interface ClassDescriptor {\n  kind: 'class';\n  elements: ClassElement[];\n  finisher?: <T>(clazz: Constructor<T>) => void | Constructor<T>;\n}\n\n// From the TC39 Decorators proposal\nexport interface ClassElement {\n  kind: 'field' | 'method';\n  key: PropertyKey;\n  placement: 'static' | 'prototype' | 'own';\n  initializer?: Function;\n  extras?: ClassElement[];\n  finisher?: <T>(clazz: Constructor<T>) => void | Constructor<T>;\n  descriptor?: PropertyDescriptor;\n}\n\nexport const legacyPrototypeMethod = (\n  descriptor: PropertyDescriptor,\n  proto: Object,\n  name: PropertyKey\n) => {\n  Object.defineProperty(proto, name, descriptor);\n};\n\nexport const standardPrototypeMethod = (\n  descriptor: PropertyDescriptor,\n  element: ClassElement\n) => ({\n  kind: 'method',\n  placement: 'prototype',\n  key: element.key,\n  descriptor,\n});\n\n/**\n * Helper for decorating a property that is compatible with both TypeScript\n * and Babel decorators. The optional `finisher` can be used to perform work on\n * the class. The optional `descriptor` should return a PropertyDescriptor\n * to install for the given property.\n *\n * @param finisher {function} Optional finisher method; receives the element\n * constructor and property key as arguments and has no return value.\n * @param descriptor {function} Optional descriptor method; receives the\n * property key as an argument and returns a property descriptor to define for\n * the given property.\n * @returns {ClassElement|void}\n */\nexport const decorateProperty =\n  ({\n    finisher,\n    descriptor,\n  }: {\n    finisher?:\n      | ((ctor: typeof ReactiveElement, property: PropertyKey) => void)\n      | null;\n    descriptor?: (property: PropertyKey) => PropertyDescriptor;\n  }) =>\n  (\n    protoOrDescriptor: Interface<ReactiveElement> | ClassElement,\n    name?: PropertyKey\n    // Note TypeScript requires the return type to be `void|any`\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): void | any => {\n    // TypeScript / Babel legacy mode\n    if (name !== undefined) {\n      const ctor = (protoOrDescriptor as ReactiveElement)\n        .constructor as typeof ReactiveElement;\n      if (descriptor !== undefined) {\n        Object.defineProperty(protoOrDescriptor, name, descriptor(name));\n      }\n      finisher?.(ctor, name!);\n      // Babel standard mode\n    } else {\n      // Note, the @property decorator saves `key` as `originalKey`\n      // so try to use it here.\n      const key =\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (protoOrDescriptor as any).originalKey ??\n        (protoOrDescriptor as ClassElement).key;\n      const info: ClassElement =\n        descriptor != undefined\n          ? {\n              kind: 'method',\n              placement: 'prototype',\n              key,\n              descriptor: descriptor((protoOrDescriptor as ClassElement).key),\n            }\n          : {...(protoOrDescriptor as ClassElement), key};\n      if (finisher != undefined) {\n        info.finisher = function <ReactiveElement>(\n          ctor: Constructor<ReactiveElement>\n        ) {\n          finisher(ctor as unknown as typeof ReactiveElement, key);\n        };\n      }\n      return info;\n    }\n  };\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {ReactiveElement} from '../reactive-element.js';\nimport {decorateProperty} from './base.js';\n\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n * @param cache An optional boolean which when true performs the DOM query only\n *     once and caches the result.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * ```ts\n * class MyElement {\n *   @query('#first')\n *   first: HTMLDivElement;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function query(selector: string, cache?: boolean) {\n  return decorateProperty({\n    descriptor: (name: PropertyKey) => {\n      const descriptor = {\n        get(this: ReactiveElement) {\n          return this.renderRoot?.querySelector(selector) ?? null;\n        },\n        enumerable: true,\n        configurable: true,\n      };\n      if (cache) {\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        descriptor.get = function (this: ReactiveElement) {\n          if (\n            (this as unknown as {[key: string]: Element | null})[\n              key as string\n            ] === undefined\n          ) {\n            (this as unknown as {[key: string]: Element | null})[\n              key as string\n            ] = this.renderRoot?.querySelector(selector) ?? null;\n          }\n          return (this as unknown as {[key: string]: Element | null})[\n            key as string\n          ];\n        };\n      }\n      return descriptor;\n    },\n  });\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {decorateProperty} from './base.js';\n\nimport type {ReactiveElement} from '../reactive-element.js';\nimport type {QueryAssignedNodesOptions} from './query-assigned-nodes.js';\n\nconst NODE_MODE = false;\nconst global = NODE_MODE ? globalThis : window;\n\n/**\n * A tiny module scoped polyfill for HTMLSlotElement.assignedElements.\n */\nconst slotAssignedElements =\n  global.HTMLSlotElement?.prototype.assignedElements != null\n    ? (slot: HTMLSlotElement, opts?: AssignedNodesOptions) =>\n        slot.assignedElements(opts)\n    : (slot: HTMLSlotElement, opts?: AssignedNodesOptions) =>\n        slot\n          .assignedNodes(opts)\n          .filter(\n            (node): node is Element => node.nodeType === Node.ELEMENT_NODE\n          );\n\n/**\n * Options for the {@linkcode queryAssignedElements} decorator. Extends the\n * options that can be passed into\n * [HTMLSlotElement.assignedElements](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedElements).\n */\nexport interface QueryAssignedElementsOptions\n  extends QueryAssignedNodesOptions {\n  /**\n   * CSS selector used to filter the elements returned. For example, a selector\n   * of `\".item\"` will only include elements with the `item` class.\n   */\n  selector?: string;\n}\n\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedElements` of the given `slot`. Provides a declarative\n * way to use\n * [`HTMLSlotElement.assignedElements`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedElements).\n *\n * Can be passed an optional {@linkcode QueryAssignedElementsOptions} object.\n *\n * Example usage:\n * ```ts\n * class MyElement {\n *   @queryAssignedElements({ slot: 'list' })\n *   listItems!: Array<HTMLElement>;\n *   @queryAssignedElements()\n *   unnamedSlotEls!: Array<HTMLElement>;\n *\n *   render() {\n *     return html`\n *       <slot name=\"list\"></slot>\n *       <slot></slot>\n *     `;\n *   }\n * }\n * ```\n *\n * Note, the type of this property should be annotated as `Array<HTMLElement>`.\n *\n * @category Decorator\n */\nexport function queryAssignedElements(options?: QueryAssignedElementsOptions) {\n  const {slot, selector} = options ?? {};\n  return decorateProperty({\n    descriptor: (_name: PropertyKey) => ({\n      get(this: ReactiveElement) {\n        const slotSelector = `slot${slot ? `[name=${slot}]` : ':not([name])'}`;\n        const slotEl =\n          this.renderRoot?.querySelector<HTMLSlotElement>(slotSelector);\n        const elements =\n          slotEl != null ? slotAssignedElements(slotEl, options) : [];\n        if (selector) {\n          return elements.filter((node) => node.matches(selector));\n        }\n        return elements;\n      },\n      enumerable: true,\n      configurable: true,\n    }),\n  });\n}\n","{\n  \"name\": \"@dotlottie/player-component\",\n  \"version\": \"2.7.12\",\n  \"description\": \"dotLottie animation player web component.\",\n  \"repository\": \"https://github.com/dotlottie/player-component.git\",\n  \"homepage\": \"https://dotlottie.io/players\",\n  \"bugs\": \"https://github.com/dotlottie/player-component/issues\",\n  \"author\": \"Jawish Hameed <jawish@lottiefiles.com>\",\n  \"license\": \"MIT\",\n  \"main\": \"dist/dotlottie-player.js\",\n  \"module\": \"dist/dotlottie-player.mjs\",\n  \"types\": \"dist/dotlottie-player.d.ts\",\n  \"files\": [\n    \"dist\"\n  ],\n  \"keywords\": [\n    \"dotlottie\",\n    \"animation\",\n    \"web component\",\n    \"component\",\n    \"lit-element\",\n    \"player\"\n  ],\n  \"scripts\": {\n    \"build\": \"tsup\",\n    \"cypress:open\": \"cypress open --component\",\n    \"dev\": \"tsup --watch\",\n    \"lint\": \"eslint .\",\n    \"lint:fix\": \"eslint --fix\",\n    \"test\": \"cypress run --component\",\n    \"type-check\": \"tsc --noEmit\"\n  },\n  \"dependencies\": {\n    \"@dotlottie/common\": \"workspace:*\",\n    \"lit\": \"^2.7.5\"\n  },\n  \"devDependencies\": {\n    \"@vitejs/plugin-legacy\": \"^4.1.0\",\n    \"axe-core\": \"^4.7.2\",\n    \"cypress\": \"^12.11.0\",\n    \"cypress-axe\": \"^1.4.0\",\n    \"cypress-ct-lit\": \"^0.3.2\",\n    \"lottie-web\": \"^5.12.2\",\n    \"terser\": \"^5.19.0\",\n    \"tsup\": \"^7.2.0\",\n    \"typescript\": \"^4.7.4\",\n    \"vite\": \"^4.3.9\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"browserslist\": [\n    \"> 3%\"\n  ]\n}\n","/**\n * Copyright 2023 Design Barn Inc.\n */\n\nimport type { RendererType, DotLottiePlayerState, PlaybackOptions, Manifest, ManifestTheme } from '@dotlottie/common';\nimport {\n  DotLottieCommonPlayer,\n  PlayerState,\n  PlayMode,\n  PlayerEvents,\n  logWarning,\n  createError,\n  DEFAULT_STATE,\n} from '@dotlottie/common';\nimport type { CSSResult, TemplateResult } from 'lit';\nimport { LitElement, html } from 'lit';\nimport { property, query, state } from 'lit/decorators.js';\nimport type { AnimationItem } from 'lottie-web';\n\nimport pkg from '../package.json';\n\nimport styles from './dotlottie-player.styles';\n\nexport interface Versions {\n  dotLottiePlayerVersion: string;\n  lottieWebVersion: string;\n}\n\nconst ELEMENT_NAME = 'dotlottie-player';\n\nexport { PlayMode, PlaybackOptions };\n\n/**\n * DotLottiePlayer web component class\n */\nexport class DotLottiePlayer extends LitElement {\n  @property({ type: String })\n  public defaultTheme = '';\n\n  /**\n   * Animation container.\n   */\n  @query('#animation')\n  protected container!: HTMLElement;\n\n  /**\n   * Play mode.\n   */\n  @property()\n  public playMode: PlayMode = PlayMode.Normal;\n\n  /**\n   * Autoplay animation on load.\n   */\n  @property({ type: Boolean })\n  public autoplay = false;\n\n  /**\n   * Background color.\n   */\n  @property({ type: String })\n  public background?: string = 'transparent';\n\n  /**\n   * Show controls.\n   */\n  @property({ type: Boolean })\n  public controls = false;\n\n  /**\n   * Direction of animation.\n   */\n  @property({ type: Number })\n  public direction = 1;\n\n  /**\n   * Whether to play on mouse hover\n   */\n  @property({ type: Boolean })\n  public hover = false;\n\n  /**\n   * Whether to loop animation.\n   */\n  @property({ type: String })\n  public loop?: string;\n\n  /**\n   * Renderer to use.\n   */\n  @property({ type: String })\n  public renderer = 'svg';\n\n  /**\n   * Animation speed.\n   */\n  @property({ type: Number })\n  public speed = 1;\n\n  /**\n   * Bodymovin JSON data or URL to JSON.\n   */\n  @property({ type: String })\n  public src?: string;\n\n  @property()\n  public intermission = 0;\n\n  /**\n   * Animation id as string or index to play on load.\n   */\n  @property({ type: String })\n  public activeAnimationId?: string | null = null;\n\n  @property({ type: Boolean })\n  public light?: boolean = false;\n\n  @property({ type: Boolean })\n  public worker?: boolean = false;\n\n  /**\n   * Interactivity state id.\n   */\n  @property({ type: String })\n  public activeStateId?: string | undefined;\n\n  @state()\n  private _seeker: number = 0;\n\n  private _dotLottieCommonPlayer: DotLottieCommonPlayer | undefined;\n\n  private _io?: IntersectionObserver;\n\n  private _loop?: boolean | number;\n\n  private _renderer?: RendererType = 'svg';\n\n  private _unsubscribeListeners?: () => void;\n\n  // Controls state\n  private _hasMultipleAnimations = false;\n\n  private _hasMultipleThemes = false;\n\n  private _hasMultipleStates = false;\n\n  private _popoverIsOpen = false;\n\n  private _animationsTabIsOpen = false;\n\n  private _statesTabIsOpen = false;\n\n  private _styleTabIsOpen = false;\n\n  private _themesForCurrentAnimation: ManifestTheme[] = [];\n\n  private _statesForCurrentAnimation: string[] = [];\n\n  /**\n   * Get number of loops or boolean value of loop.\n   *\n   * @param loop - either a string representing a boolean or a number of loops to play\n   * @returns boolean - if loop was activated or not\n   */\n  private _parseLoop(loop: string): boolean | number {\n    const loopNb = parseInt(loop, 10);\n\n    if (Number.isInteger(loopNb) && loopNb > 0) {\n      this._loop = loopNb;\n\n      return loopNb;\n    } else if (typeof loop === 'string' && ['true', 'false'].includes(loop)) {\n      this._loop = loop === 'true';\n\n      return this._loop;\n    } else {\n      logWarning('loop must be a positive integer or a boolean');\n    }\n\n    return false;\n  }\n\n  /**\n   * Handles click and drag actions on the progress track.\n   */\n  private _handleSeekChange(event: Event): void {\n    const target = event.currentTarget as HTMLInputElement;\n\n    try {\n      const value = parseInt(target.value, 10);\n\n      if (!this._dotLottieCommonPlayer) {\n        return;\n      }\n\n      const frame: number = (value / 100) * this._dotLottieCommonPlayer.totalFrames;\n\n      this.seek(frame);\n    } catch (error) {\n      throw createError('Error while seeking animation');\n    }\n  }\n\n  private _initListeners(): void {\n    const commonPlayer = this._dotLottieCommonPlayer;\n\n    if (commonPlayer === undefined) {\n      logWarning('player not initialized - cannot add event listeners', 'dotlottie-player-component');\n\n      return;\n    }\n\n    // Calculate and save the current progress of the animation\n    this._unsubscribeListeners = commonPlayer.state.subscribe(\n      (playerState: DotLottiePlayerState, prevState: DotLottiePlayerState) => {\n        this._seeker = playerState.seeker;\n\n        this.requestUpdate();\n\n        if (prevState.currentState !== playerState.currentState) {\n          this.dispatchEvent(new CustomEvent(playerState.currentState));\n        }\n\n        this.dispatchEvent(\n          new CustomEvent(PlayerEvents.Frame, {\n            detail: {\n              frame: playerState.frame,\n              seeker: playerState.seeker,\n            },\n          }),\n        );\n\n        this.dispatchEvent(\n          new CustomEvent(PlayerEvents.VisibilityChange, {\n            detail: {\n              visibilityPercentage: playerState.visibilityPercentage,\n            },\n          }),\n        );\n      },\n    );\n\n    // Handle animation play complete\n    commonPlayer.addEventListener('complete', () => {\n      this.dispatchEvent(new CustomEvent(PlayerEvents.Complete));\n    });\n\n    commonPlayer.addEventListener('loopComplete', () => {\n      this.dispatchEvent(new CustomEvent(PlayerEvents.LoopComplete));\n    });\n\n    // Handle lottie-web ready event\n    commonPlayer.addEventListener('DOMLoaded', () => {\n      const manifest = this.getManifest();\n\n      if (manifest && manifest.themes) {\n        this._themesForCurrentAnimation = manifest.themes.filter((theme) =>\n          theme.animations.includes(this.getCurrentAnimationId() || ''),\n        );\n      }\n\n      if (manifest && manifest.states) {\n        this._hasMultipleStates = manifest.states.length > 0;\n\n        this._statesForCurrentAnimation = [];\n        manifest.states.forEach((newState: string) => {\n          this._statesForCurrentAnimation.push(newState);\n        });\n      }\n\n      this.dispatchEvent(new CustomEvent(PlayerEvents.Ready));\n    });\n\n    // Handle animation data load complete\n    commonPlayer.addEventListener('data_ready', () => {\n      this.dispatchEvent(new CustomEvent(PlayerEvents.DataReady));\n    });\n\n    // Set error state when animation load fail event triggers\n    commonPlayer.addEventListener('data_failed', () => {\n      this.dispatchEvent(new CustomEvent(PlayerEvents.DataFail));\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (window) {\n      window.addEventListener('click', (event) => this._clickOutListener(event));\n    }\n  }\n\n  /**\n   * Configure and initialize lottie-web player instance.\n   */\n  public async load(\n    src: string | AnimationItem,\n    overrideRendererSettings?: Record<string, unknown>,\n    playbackOptions?: PlaybackOptions,\n  ): Promise<void> {\n    if (!this.shadowRoot) {\n      return;\n    }\n\n    if (this._dotLottieCommonPlayer) {\n      this._dotLottieCommonPlayer.destroy();\n    }\n\n    /**\n     * User's can call the load method - only do new initialization inside firstConnected()\n     */\n    this._dotLottieCommonPlayer = new DotLottieCommonPlayer(src, this.container as HTMLDivElement, {\n      rendererSettings: overrideRendererSettings ?? {\n        scaleMode: 'noScale',\n        clearCanvas: true,\n        progressiveLoad: true,\n        hideOnTransparent: true,\n      },\n      hover: this.hasAttribute('hover') ? this.hover : undefined,\n      renderer: this.hasAttribute('renderer') ? this._renderer : undefined,\n      loop: this.hasAttribute('loop') ? this._loop : undefined,\n      direction: this.hasAttribute('direction') ? (this.direction === 1 ? 1 : -1) : undefined,\n      speed: this.hasAttribute('speed') ? this.speed : undefined,\n      intermission: this.hasAttribute('intermission') ? Number(this.intermission) : undefined,\n      playMode: this.hasAttribute('playMode') ? this.playMode : undefined,\n      autoplay: this.hasAttribute('autoplay') ? this.autoplay : undefined,\n      activeAnimationId: this.hasAttribute('activeAnimationId') ? this.activeAnimationId : undefined,\n      defaultTheme: this.hasAttribute('defaultTheme') ? this.defaultTheme : undefined,\n      light: this.light,\n      worker: this.worker,\n      activeStateId: this.hasAttribute('activeStateId') ? this.activeStateId : undefined,\n    });\n\n    await this._dotLottieCommonPlayer.load(playbackOptions);\n\n    const manifest = this.getManifest();\n\n    // Init controls state\n    this._hasMultipleAnimations = this.animationCount() > 1;\n\n    if (manifest) {\n      if (manifest.themes) {\n        this._themesForCurrentAnimation = manifest.themes.filter((theme) =>\n          theme.animations.includes(this.getCurrentAnimationId() || ''),\n        );\n\n        this._hasMultipleThemes = manifest.themes.length > 0;\n      }\n\n      if (manifest.states) {\n        this._hasMultipleStates = manifest.states.length > 0;\n\n        this._statesForCurrentAnimation = [];\n        manifest.states.forEach((newState: string) => {\n          this._statesForCurrentAnimation.push(newState);\n        });\n      }\n    }\n\n    /**\n     * Init done\n     */\n    this._initListeners();\n  }\n\n  /**\n   * @returns Current animation's id\n   */\n  public getCurrentAnimationId(): string | undefined {\n    return this._dotLottieCommonPlayer?.currentAnimationId;\n  }\n\n  /**\n   * @returns The current number of animations\n   */\n  public animationCount(): number {\n    if (!this._dotLottieCommonPlayer) return 0;\n\n    return this._dotLottieCommonPlayer.getManifest()?.animations.length || 0;\n  }\n\n  /**\n   * @returns The ids of all the animations\n   */\n  public animations(): string[] {\n    if (!this._dotLottieCommonPlayer) return [];\n\n    const manifest = this._dotLottieCommonPlayer.getManifest();\n\n    return manifest?.animations.map((animation) => animation.id) || [];\n  }\n\n  /**\n   * @returns The current playing animation\n   */\n  public currentAnimation(): string {\n    if (!this._dotLottieCommonPlayer || !this._dotLottieCommonPlayer.currentAnimationId) return '';\n\n    return this._dotLottieCommonPlayer.currentAnimationId;\n  }\n\n  /**\n   * @returns the current player states\n   */\n  public getState(): DotLottiePlayerState {\n    if (!this._dotLottieCommonPlayer) return DEFAULT_STATE;\n\n    return this._dotLottieCommonPlayer.getState();\n  }\n\n  /**\n   *\n   * @returns The current manifest.\n   */\n  public getManifest(): Manifest | undefined {\n    return this._dotLottieCommonPlayer?.getManifest();\n  }\n\n  /**\n   * @returns The current lottie-web instance.\n   */\n  public getLottie(): AnimationItem | undefined {\n    return this._dotLottieCommonPlayer?.getAnimationInstance();\n  }\n\n  /**\n   * @returns The current version of the dotLottie player and lottie-web.\n   */\n  public getVersions(): Versions {\n    return {\n      lottieWebVersion: DotLottieCommonPlayer.getLottieWebVersion(),\n      dotLottiePlayerVersion: `${pkg.version}`,\n    };\n  }\n\n  /**\n   * Play the previous animation. The order is taken from the manifest.\n   */\n  public previous(\n    getOptions?: (currPlaybackOptions: PlaybackOptions, manifestPlaybackOptions: PlaybackOptions) => PlaybackOptions,\n  ): void {\n    this._dotLottieCommonPlayer?.previous(getOptions);\n  }\n\n  /**\n   * Play the next animation. The order is taken from the manifest.\n   */\n  public next(\n    getOptions?: (currPlaybackOptions: PlaybackOptions, manifestPlaybackOptions: PlaybackOptions) => PlaybackOptions,\n  ): void {\n    this._dotLottieCommonPlayer?.next(getOptions);\n  }\n\n  /**\n   * Reset to the initial state defined in the manifest.\n   */\n  public reset(): void {\n    this._dotLottieCommonPlayer?.reset();\n  }\n\n  public play(\n    targetAnimation?: string | number,\n    getOptions?: (currPlaybackOptions: PlaybackOptions, manifestPlaybackOptions: PlaybackOptions) => PlaybackOptions,\n  ): void {\n    if (!this._dotLottieCommonPlayer) {\n      return;\n    }\n\n    this._dotLottieCommonPlayer.play(targetAnimation, getOptions);\n  }\n\n  /**\n   * Pause animation play.\n   */\n  public pause(): void {\n    if (!this._dotLottieCommonPlayer) return;\n\n    this._dotLottieCommonPlayer.pause();\n  }\n\n  /**\n   * Stops animation play.\n   */\n  public stop(): void {\n    if (!this._dotLottieCommonPlayer) return;\n\n    this._dotLottieCommonPlayer.stop();\n  }\n\n  // To do add playback option to manifest\n  // To do add as prop\n\n  /**\n   * Play the animation when it appears on screen and pause when it goes out of view.\n   *\n   * @param playOnShowOptions - what percentage of the target's visibility the observer's callback should be executed\n   * @returns\n   */\n  public playOnShow(playOnShowOptions?: { threshold: number[] }): void {\n    if (!this._dotLottieCommonPlayer) return;\n\n    this._dotLottieCommonPlayer.playOnShow(playOnShowOptions);\n  }\n\n  /**\n   * Stop the playOnShow observer.\n   * @returns\n   */\n  public stopPlayOnShow(): void {\n    if (!this._dotLottieCommonPlayer) return;\n\n    this._dotLottieCommonPlayer.stopPlayOnShow();\n  }\n\n  /**\n   * Play the animation synchronized to page scroll.\n   * @param scrollOptions\n   *  - positionCallback: callback function to get the current position of the player relative to the whole page\n   *  - segments: optional segment of animation to play\n   *  - threshold: optional visibility threshold to start playing the animation. Between 0 and 1. Defaults to [0, 1].\n   * @returns\n   */\n  public playOnScroll(scrollOptions?: {\n    positionCallback?: (position: number) => void;\n    segments?: [number, number];\n    threshold?: [number, number];\n  }): void {\n    if (!this._dotLottieCommonPlayer) return;\n\n    this._dotLottieCommonPlayer.playOnScroll(scrollOptions);\n  }\n\n  /**\n   * Stop the play on scroll observer.\n   * @returns\n   */\n  public stopPlayOnScroll(): void {\n    if (!this._dotLottieCommonPlayer) return;\n\n    this._dotLottieCommonPlayer.stopPlayOnScroll();\n  }\n\n  /**\n   * Seek to a given frame.\n   */\n  public seek(value: number | string): void {\n    if (!this._dotLottieCommonPlayer) return;\n\n    this._dotLottieCommonPlayer.seek(value);\n  }\n\n  /**\n   * Snapshot the current frame as SVG.\n   *\n   * If 'download' argument is boolean true, then a download is triggered in browser.\n   */\n  public snapshot(download = true): string {\n    if (!this.shadowRoot) return '';\n\n    // Get SVG element and serialize markup\n    const svgElement = this.shadowRoot.querySelector('.animation svg') as Node;\n    const data = new XMLSerializer().serializeToString(svgElement);\n\n    // Trigger file download\n    if (download) {\n      const element = document.createElement('a');\n\n      element.href = `data:image/svg+xml;charset=utf-8,${encodeURIComponent(data)}`;\n      element.download = `download_${this._seeker}.svg`;\n      document.body.appendChild(element);\n\n      element.click();\n\n      document.body.removeChild(element);\n    }\n\n    return data;\n  }\n\n  /**\n   * Set theme\n   */\n  public setTheme(theme: string): void {\n    this._dotLottieCommonPlayer?.setDefaultTheme(theme);\n  }\n\n  /**\n   * @returns All the theme keys\n   */\n  public themes(): string[] {\n    if (!this._dotLottieCommonPlayer) return [];\n\n    const manifest = this._dotLottieCommonPlayer.getManifest();\n\n    return manifest?.themes?.map((theme) => theme.id) || [];\n  }\n\n  /**\n   * @returns The current applied theme\n   */\n  public getDefaultTheme(): string {\n    if (!this._dotLottieCommonPlayer) return '';\n\n    return this._dotLottieCommonPlayer.defaultTheme;\n  }\n\n  /**\n   * @returns The current active state machine\n   */\n  public getActiveStateMachine(): string | undefined {\n    if (!this._dotLottieCommonPlayer) return '';\n\n    return this._dotLottieCommonPlayer.activeStateId;\n  }\n\n  /**\n   * Freeze animation play.\n   * This internal state pauses animation and is used to differentiate between\n   * user requested pauses and component instigated pauses.\n   */\n  private _freeze(): void {\n    if (!this._dotLottieCommonPlayer) return;\n\n    this._dotLottieCommonPlayer.freeze();\n  }\n\n  /**\n   * Sets animation play speed.\n   *\n   * @param value - Playback speed.\n   */\n  public setSpeed(value = 1): void {\n    if (!this._dotLottieCommonPlayer) return;\n\n    this._dotLottieCommonPlayer.setSpeed(value);\n  }\n\n  /**\n   * Animation play direction.\n   *\n   * @param value - Direction values.\n   */\n  public setDirection(value: 1 | -1): void {\n    if (!this._dotLottieCommonPlayer) return;\n\n    this._dotLottieCommonPlayer.setDirection(value);\n  }\n\n  /**\n   * Sets the looping of the animation.\n   *\n   * @param value - Whether to enable looping. Boolean true enables looping.\n   */\n  public setLooping(value: boolean | number): void {\n    if (!this._dotLottieCommonPlayer) return;\n\n    this._dotLottieCommonPlayer.setLoop(value);\n  }\n\n  public isLooping(): number | boolean {\n    if (!this._dotLottieCommonPlayer) return false;\n\n    return this._dotLottieCommonPlayer.loop;\n  }\n\n  /**\n   * Toggle playing state.\n   */\n  public togglePlay(): void {\n    if (!this._dotLottieCommonPlayer) return;\n\n    this._dotLottieCommonPlayer.togglePlay();\n  }\n\n  /**\n   * Toggles animation looping.\n   */\n  public toggleLooping(): void {\n    if (!this._dotLottieCommonPlayer) return;\n\n    this._dotLottieCommonPlayer.toggleLoop();\n  }\n\n  /**\n   * Sets the player mode\n   * @param mode - The mode to set ('normal', 'bounce')\n   */\n  public setPlayMode(mode: PlayMode): void {\n    if (!this._dotLottieCommonPlayer) return;\n\n    this._dotLottieCommonPlayer.setMode(mode);\n  }\n\n  /**\n   * Changes the Interactivity state id and starts it.\n   *\n   * @param stateId - state machine id.\n   */\n  public enterInteractiveMode(stateId: string): void {\n    if (!this._dotLottieCommonPlayer) return;\n\n    this._dotLottieCommonPlayer.enterInteractiveMode(stateId);\n  }\n\n  /**\n   * Exits the Interactivity mode.\n   */\n  public exitInteractiveMode(): void {\n    if (!this._dotLottieCommonPlayer) return;\n\n    this._dotLottieCommonPlayer.exitInteractiveMode();\n  }\n\n  /**\n   * Reverts PlaybackOptions to manifest values instead of player props.\n   */\n  public revertToManifestValues(playbackKeys?: Array<keyof PlaybackOptions | 'activeAnimationId'>): void {\n    this._dotLottieCommonPlayer?.revertToManifestValues(playbackKeys);\n  }\n\n  /**\n   * Returns the styles for the component. Overriding causes styles to not be applied.\n   */\n  public static get styles(): CSSResult {\n    return styles;\n  }\n\n  /**\n   * Initialize everything on component first render.\n   */\n  protected override async firstUpdated(): Promise<void> {\n    this.container = this.shadowRoot?.querySelector('#animation') as HTMLElement;\n\n    // Add intersection observer for detecting component being out-of-view.\n    if ('IntersectionObserver' in window) {\n      this._io = new IntersectionObserver((entries: IntersectionObserverEntry[]) => {\n        if (entries[0] !== undefined && entries[0].isIntersecting) {\n          if (this._dotLottieCommonPlayer?.currentState === PlayerState.Frozen) {\n            this.play();\n          }\n        } else if (this._dotLottieCommonPlayer?.currentState === PlayerState.Playing) {\n          this._freeze();\n        }\n      });\n\n      this._io.observe(this.container);\n    }\n\n    // Parse loop attribute if present as a number or string-boolean\n    // Also check if plain 'loop' prop is present\n    if (this.loop) {\n      this._parseLoop(this.loop);\n    } else if (this.hasAttribute('loop')) {\n      this._parseLoop('true');\n    }\n\n    // Parse renderer and set private variable\n    if (this.renderer === 'svg') this._renderer = 'svg';\n    else if (this.renderer === 'canvas') this._renderer = 'canvas';\n    else if (this.renderer === 'html') this._renderer = 'html';\n\n    // Setup lottie player\n    if (this.src) {\n      await this.load(this.src);\n    }\n  }\n\n  /**\n   * Cleanup on component destroy.\n   */\n  public override disconnectedCallback(): void {\n    // Remove intersection observer for detecting component being out-of-view.\n    if (this._io) {\n      this._io.disconnect();\n      this._io = undefined;\n    }\n\n    // Destroy lottie\n    this._dotLottieCommonPlayer?.destroy();\n\n    this._unsubscribeListeners?.();\n\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (window) {\n      window.removeEventListener('click', (event) => this._clickOutListener(event));\n    }\n  }\n\n  private _clickOutListener(event: MouseEvent): void {\n    const inside = event.composedPath().some((element) => {\n      if (element instanceof HTMLElement) {\n        return element.classList.contains('popover') || element.id === 'lottie-animation-options';\n      }\n\n      return false;\n    });\n\n    if (!inside && this._popoverIsOpen) {\n      this._popoverIsOpen = false;\n      this.requestUpdate();\n    }\n  }\n\n  protected renderControls(): TemplateResult | undefined {\n    const isPlaying: boolean = this._dotLottieCommonPlayer?.currentState === PlayerState.Playing;\n    const isPaused: boolean = this._dotLottieCommonPlayer?.currentState === PlayerState.Paused;\n\n    return html`\n      <div id=\"lottie-controls\" aria-label=\"lottie-animation-controls\" class=\"toolbar\">\n        ${this._hasMultipleAnimations\n          ? html`\n              <button @click=${(): void => this.previous()} aria-label=\"Previous animation\" class=\"btn-spacing-left\">\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path\n                    fill-rule=\"evenodd\"\n                    clip-rule=\"evenodd\"\n                    d=\"M1.69214 13.5C1.69214 13.7761 1.916 14 2.19214 14C2.46828 14 2.69214 13.7761 2.69214 13.5L2.69214 2.5C2.69214 2.22386 2.46828 2 2.19214 2C1.916 2 1.69214 2.22386 1.69214 2.5V13.5ZM12.5192 13.7828C13.1859 14.174 14.0254 13.6933 14.0254 12.9204L14.0254 3.0799C14.0254 2.30692 13.1859 1.8262 12.5192 2.21747L4.13612 7.13769C3.47769 7.52414 3.47769 8.4761 4.13612 8.86255L12.5192 13.7828Z\"\n                    fill=\"#20272C\"\n                  />\n                </svg>\n              </button>\n            `\n          : html``}\n        <button\n          id=\"lottie-play-button\"\n          @click=${(): void => {\n            this.togglePlay();\n          }}\n          class=${isPlaying || isPaused\n            ? `active ${this._hasMultipleAnimations ? 'btn-spacing-center' : 'btn-spacing-right'}`\n            : `${this._hasMultipleAnimations ? 'btn-spacing-center' : 'btn-spacing-right'}`}\n          aria-label=\"play / pause animation\"\n        >\n          ${isPlaying\n            ? html`\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path\n                    d=\"M3.99996 2C3.26358 2 2.66663 2.59695 2.66663 3.33333V12.6667C2.66663 13.403 3.26358 14 3.99996 14H5.33329C6.06967 14 6.66663 13.403 6.66663 12.6667V3.33333C6.66663 2.59695 6.06967 2 5.33329 2H3.99996Z\"\n                    fill=\"#20272C\"\n                  />\n                  <path\n                    d=\"M10.6666 2C9.93025 2 9.33329 2.59695 9.33329 3.33333V12.6667C9.33329 13.403 9.93025 14 10.6666 14H12C12.7363 14 13.3333 13.403 13.3333 12.6667V3.33333C13.3333 2.59695 12.7363 2 12 2H10.6666Z\"\n                    fill=\"#20272C\"\n                  />\n                </svg>\n              `\n            : html`\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path\n                    d=\"M3.33337 3.46787C3.33337 2.52312 4.35948 1.93558 5.17426 2.41379L12.8961 6.94592C13.7009 7.41824 13.7009 8.58176 12.8961 9.05408L5.17426 13.5862C4.35948 14.0644 3.33337 13.4769 3.33337 12.5321V3.46787Z\"\n                    fill=\"#20272C\"\n                  />\n                </svg>\n              `}\n        </button>\n        ${this._hasMultipleAnimations\n          ? html`\n              <button @click=${(): void => this.next()} aria-label=\"Next animation\" class=\"btn-spacing-right\">\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path\n                    fill-rule=\"evenodd\"\n                    clip-rule=\"evenodd\"\n                    d=\"M14.3336 2.5C14.3336 2.22386 14.1097 2 13.8336 2C13.5574 2 13.3336 2.22386 13.3336 2.5V13.5C13.3336 13.7761 13.5574 14 13.8336 14C14.1097 14 14.3336 13.7761 14.3336 13.5V2.5ZM3.50618 2.21722C2.83954 1.82595 2 2.30667 2 3.07965V12.9201C2 13.6931 2.83954 14.1738 3.50618 13.7825L11.8893 8.86231C12.5477 8.47586 12.5477 7.52389 11.8893 7.13745L3.50618 2.21722Z\"\n                    fill=\"#20272C\"\n                  />\n                </svg>\n              </button>\n            `\n          : html``}\n        <input\n          id=\"lottie-seeker-input\"\n          class=\"seeker ${this._dotLottieCommonPlayer?.direction === -1 ? 'to-left' : ''}\"\n          type=\"range\"\n          min=\"0\"\n          step=\"1\"\n          max=\"100\"\n          .value=${this._seeker}\n          @input=${(event: Event): void => this._handleSeekChange(event)}\n          @mousedown=${(): void => {\n            this._freeze();\n          }}\n          @mouseup=${(): void => {\n            this._dotLottieCommonPlayer?.unfreeze();\n          }}\n          aria-valuemin=\"1\"\n          aria-valuemax=\"100\"\n          role=\"slider\"\n          aria-valuenow=${this._seeker}\n          aria-label=\"lottie-seek-input\"\n          style=${`--seeker: ${this._seeker}`}\n        />\n        <button\n          id=\"lottie-loop-toggle\"\n          @click=${(): void => this.toggleLooping()}\n          class=${this._dotLottieCommonPlayer?.loop ? 'active btn-spacing-left' : 'btn-spacing-left'}\n          aria-label=\"loop-toggle\"\n        >\n          <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path\n              d=\"M10.8654 2.31319C11.0607 2.11793 11.3772 2.11793 11.5725 2.31319L13.4581 4.19881C13.6534 4.39407 13.6534 4.71066 13.4581 4.90592L11.5725 6.79154C11.3772 6.9868 11.0607 6.9868 10.8654 6.79154C10.6701 6.59628 10.6701 6.27969 10.8654 6.08443L11.6162 5.33362H4V6.66695C4 7.03514 3.70152 7.33362 3.33333 7.33362C2.96514 7.33362 2.66666 7.03514 2.66666 6.66695L2.66666 4.66695C2.66666 4.29876 2.96514 4.00028 3.33333 4.00028H11.8454L10.8654 3.0203C10.6701 2.82504 10.6701 2.50846 10.8654 2.31319Z\"\n              fill=\"currentColor\"\n            />\n            <path\n              d=\"M12.4375 11.9999C12.8057 11.9999 13.1042 11.7014 13.1042 11.3332V9.33321C13.1042 8.96502 12.8057 8.66655 12.4375 8.66655C12.0693 8.66655 11.7708 8.96502 11.7708 9.33321V10.6665H4.15462L4.90543 9.91573C5.10069 9.72047 5.10069 9.40389 4.90543 9.20862C4.71017 9.01336 4.39359 9.01336 4.19832 9.20862L2.31271 11.0942C2.11744 11.2895 2.11744 11.6061 2.31271 11.8013L4.19832 13.687C4.39359 13.8822 4.71017 13.8822 4.90543 13.687C5.10069 13.4917 5.10069 13.1751 4.90543 12.9799L3.92545 11.9999H12.4375Z\"\n              fill=\"currentColor\"\n            />\n          </svg>\n        </button>\n        ${this._hasMultipleAnimations || this._hasMultipleThemes || this._hasMultipleStates\n          ? html`\n              <button\n                id=\"lottie-animation-options\"\n                @click=${(): void => {\n                  this._popoverIsOpen = !this._popoverIsOpen;\n                  this.requestUpdate();\n                }}\n                aria-label=\"options\"\n                class=\"btn-spacing-right\"\n                style=${`background-color: ${\n                  this._popoverIsOpen ? 'var(--lottie-player-toolbar-icon-hover-color)' : ''\n                }`}\n              >\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path\n                    d=\"M8.33337 11.6666C7.78109 11.6666 7.33337 12.1143 7.33337 12.6666C7.33337 13.2189 7.78109 13.6666 8.33337 13.6666C8.88566 13.6666 9.33337 13.2189 9.33337 12.6666C9.33337 12.1143 8.88566 11.6666 8.33337 11.6666Z\"\n                    fill=\"#20272C\"\n                  />\n                  <path\n                    d=\"M7.33337 7.99992C7.33337 7.44763 7.78109 6.99992 8.33337 6.99992C8.88566 6.99992 9.33338 7.44763 9.33338 7.99992C9.33338 8.5522 8.88566 8.99992 8.33337 8.99992C7.78109 8.99992 7.33337 8.5522 7.33337 7.99992Z\"\n                    fill=\"#20272C\"\n                  />\n                  <path\n                    d=\"M7.33337 3.33325C7.33337 2.78097 7.78109 2.33325 8.33337 2.33325C8.88566 2.33325 9.33338 2.78097 9.33338 3.33325C9.33338 3.88554 8.88566 4.33325 8.33337 4.33325C7.78109 4.33325 7.33337 3.88554 7.33337 3.33325Z\"\n                    fill=\"#20272C\"\n                  />\n                </svg>\n              </button>\n            `\n          : html``}\n      </div>\n      ${this._popoverIsOpen\n        ? html`\n            <div\n              id=\"popover\"\n              class=\"popover\"\n              tabindex=\"0\"\n              aria-label=\"lottie animations themes popover\"\n              style=\"min-height: ${this.themes().length > 0 ? '84px' : 'auto'}\"\n            >\n              ${!this._animationsTabIsOpen && !this._styleTabIsOpen && !this._statesTabIsOpen\n                ? html`\n                    <button\n                      class=\"popover-button\"\n                      tabindex=\"0\"\n                      aria-label=\"animations\"\n                      @click=${(): void => {\n                        this._animationsTabIsOpen = !this._animationsTabIsOpen;\n                        this.requestUpdate();\n                      }}\n                      @keydown=${(key: KeyboardEvent): void => {\n                        if (key.code === 'Space' || key.code === 'Enter') {\n                          this._animationsTabIsOpen = !this._animationsTabIsOpen;\n                          this.requestUpdate();\n                        }\n                      }}\n                    >\n                      <div class=\"popover-button-text\">Animations</div>\n                      <div>\n                        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                          <path\n                            fill-rule=\"evenodd\"\n                            clip-rule=\"evenodd\"\n                            d=\"M10.4697 17.5303C10.1768 17.2374 10.1768 16.7626 10.4697 16.4697L14.9393 12L10.4697 7.53033C10.1768 7.23744 10.1768 6.76256 10.4697 6.46967C10.7626 6.17678 11.2374 6.17678 11.5303 6.46967L16.5303 11.4697C16.8232 11.7626 16.8232 12.2374 16.5303 12.5303L11.5303 17.5303C11.2374 17.8232 10.7626 17.8232 10.4697 17.5303Z\"\n                            fill=\"#4C5863\"\n                          />\n                        </svg>\n                      </div>\n                    </button>\n                  `\n                : html``}\n              ${this._hasMultipleThemes && !this._styleTabIsOpen && !this._animationsTabIsOpen && !this._statesTabIsOpen\n                ? html` <button\n                    class=\"popover-button\"\n                    aria-label=\"Themes\"\n                    @click=${(): void => {\n                      this._styleTabIsOpen = !this._styleTabIsOpen;\n                      this.requestUpdate();\n                    }}\n                    @keydown=${(key: KeyboardEvent): void => {\n                      if (key.code === 'Space' || key.code === 'Enter') {\n                        this._styleTabIsOpen = !this._styleTabIsOpen;\n                        this.requestUpdate();\n                      }\n                      // eslint-disable-next-line no-secrets/no-secrets\n                    }}\n                  >\n                    <div class=\"popover-button-text\">Themes</div>\n                    <div>\n                      <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path\n                          fill-rule=\"evenodd\"\n                          clip-rule=\"evenodd\"\n                          d=\"M10.4697 17.5303C10.1768 17.2374 10.1768 16.7626 10.4697 16.4697L14.9393 12L10.4697 7.53033C10.1768 7.23744 10.1768 6.76256 10.4697 6.46967C10.7626 6.17678 11.2374 6.17678 11.5303 6.46967L16.5303 11.4697C16.8232 11.7626 16.8232 12.2374 16.5303 12.5303L11.5303 17.5303C11.2374 17.8232 10.7626 17.8232 10.4697 17.5303Z\"\n                          fill=\"#4C5863\"\n                        />\n                      </svg>\n                    </div>\n                  </button>`\n                : ''}\n              ${this._hasMultipleStates && !this._styleTabIsOpen && !this._animationsTabIsOpen && !this._statesTabIsOpen\n                ? html` <button\n                    class=\"popover-button\"\n                    aria-label=\"States\"\n                    @click=${(): void => {\n                      this._statesTabIsOpen = !this._statesTabIsOpen;\n                      this.requestUpdate();\n                    }}\n                    @keydown=${(key: KeyboardEvent): void => {\n                      if (key.code === 'Space' || key.code === 'Enter') {\n                        this._statesTabIsOpen = !this._statesTabIsOpen;\n                        this.requestUpdate();\n                      }\n                    }}\n                  >\n                    <div class=\"popover-button-text\">States</div>\n                    <div>\n                      <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path\n                          fill-rule=\"evenodd\"\n                          clip-rule=\"evenodd\"\n                          d=\"M10.4697 17.5303C10.1768 17.2374 10.1768 16.7626 10.4697 16.4697L14.9393 12L10.4697 7.53033C10.1768 7.23744 10.1768 6.76256 10.4697 6.46967C10.7626 6.17678 11.2374 6.17678 11.5303 6.46967L16.5303 11.4697C16.8232 11.7626 16.8232 12.2374 16.5303 12.5303L11.5303 17.5303C11.2374 17.8232 10.7626 17.8232 10.4697 17.5303Z\"\n                          fill=\"#4C5863\"\n                        />\n                      </svg>\n                    </div>\n                  </button>`\n                : ''}\n              ${this._animationsTabIsOpen\n                ? html`<button\n                      class=\"option-title-button\"\n                      aria-label=\"Back to main popover menu\"\n                      @click=${(): void => {\n                        this._animationsTabIsOpen = !this._animationsTabIsOpen;\n                        this.requestUpdate();\n                      }}\n                    >\n                      <div class=\"option-title-chevron\">\n                        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                          <path\n                            fill-rule=\"evenodd\"\n                            clip-rule=\"evenodd\"\n                            d=\"M13.5303 6.46967C13.8232 6.76256 13.8232 7.23744 13.5303 7.53033L9.06066 12L13.5303 16.4697C13.8232 16.7626 13.8232 17.2374 13.5303 17.5303C13.2374 17.8232 12.7626 17.8232 12.4697 17.5303L7.46967 12.5303C7.17678 12.2374 7.17678 11.7626 7.46967 11.4697L12.4697 6.46967C12.7626 6.17678 13.2374 6.17678 13.5303 6.46967Z\"\n                            fill=\"#20272C\"\n                          />\n                        </svg>\n                      </div>\n                      <div>Animations</div>\n                    </button>\n                    <div class=\"option-title-separator\"></div>\n                    <div class=\"option-row\">\n                      <ul>\n                        ${this.animations().map((animationName) => {\n                          return html`\n                            <li>\n                              <button\n                                class=\"option-button\"\n                                aria-label=${`${animationName}`}\n                                @click=${(): void => {\n                                  this._animationsTabIsOpen = !this._animationsTabIsOpen;\n                                  this._popoverIsOpen = !this._popoverIsOpen;\n                                  this.play(animationName);\n                                  this.requestUpdate();\n                                }}\n                                @keydown=${(key: KeyboardEvent): void => {\n                                  if (key.code === 'Space' || key.code === 'Enter') {\n                                    this._animationsTabIsOpen = !this._animationsTabIsOpen;\n                                    this._popoverIsOpen = !this._popoverIsOpen;\n                                    this.play(animationName);\n                                    this.requestUpdate();\n                                  }\n                                }}\n                              >\n                                <div class=\"option-tick\">\n                                  ${this.currentAnimation() === animationName\n                                    ? html`\n                                        <svg\n                                          width=\"24\"\n                                          height=\"24\"\n                                          viewBox=\"0 0 24 24\"\n                                          fill=\"none\"\n                                          xmlns=\"http://www.w3.org/2000/svg\"\n                                        >\n                                          <path\n                                            fill-rule=\"evenodd\"\n                                            clip-rule=\"evenodd\"\n                                            d=\"M20.5281 5.9372C20.821 6.23009 20.821 6.70497 20.5281 6.99786L9.46297 18.063C9.32168 18.2043 9.12985 18.2833 8.93004 18.2826C8.73023 18.2819 8.53895 18.2015 8.39864 18.0593L3.46795 13.0596C3.1771 12.7647 3.1804 12.2898 3.47532 11.999C3.77024 11.7081 4.2451 11.7114 4.53595 12.0063L8.93634 16.4683L19.4675 5.9372C19.7604 5.64431 20.2352 5.64431 20.5281 5.9372Z\"\n                                            fill=\"#20272C\"\n                                          />\n                                        </svg>\n                                      `\n                                    : html`<div style=\"width: 24px; height: 24px\"></div>`}\n                                </div>\n                                <div>${animationName}</div>\n                              </button>\n                            </li>\n                          `;\n                        })}\n                      </ul>\n                    </div> `\n                : html``}\n              ${this._styleTabIsOpen\n                ? html`<div class=\"option-title-themes-row\">\n                      <button\n                        class=\"option-title-button themes\"\n                        aria-label=\"Back to main popover menu\"\n                        @click=${(): void => {\n                          this._styleTabIsOpen = !this._styleTabIsOpen;\n                          this.requestUpdate();\n                        }}\n                      >\n                        <div class=\"option-title-chevron\">\n                          <svg\n                            width=\"24\"\n                            height=\"24\"\n                            viewBox=\"0 0 24 24\"\n                            fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                          >\n                            <path\n                              fill-rule=\"evenodd\"\n                              clip-rule=\"evenodd\"\n                              d=\"M13.5303 6.46967C13.8232 6.76256 13.8232 7.23744 13.5303 7.53033L9.06066 12L13.5303 16.4697C13.8232 16.7626 13.8232 17.2374 13.5303 17.5303C13.2374 17.8232 12.7626 17.8232 12.4697 17.5303L7.46967 12.5303C7.17678 12.2374 7.17678 11.7626 7.46967 11.4697L12.4697 6.46967C12.7626 6.17678 13.2374 6.17678 13.5303 6.46967Z\"\n                              fill=\"#20272C\"\n                            />\n                          </svg>\n                        </div>\n                        <div class=\"option-title-text\">Themes</div>\n                        ${this._dotLottieCommonPlayer?.defaultTheme === ''\n                          ? html``\n                          : html`\n                              <button\n                                class=\"reset-btn\"\n                                @click=${(): void => {\n                                  this.setTheme('');\n                                  this.requestUpdate();\n                                }}\n                              >\n                                Reset\n                              </button>\n                            `}\n                      </button>\n                    </div>\n                    <div class=\"option-title-separator\"></div>\n                    <div class=\"option-row\">\n                      <ul>\n                        ${this._themesForCurrentAnimation.map((themeName) => {\n                          return html`\n                            <li>\n                              <button\n                                class=\"option-button\"\n                                aria-label=\"${themeName.id}\"\n                                @click=${(): void => {\n                                  this.setTheme(themeName.id);\n                                }}\n                                @keydown=${(key: KeyboardEvent): void => {\n                                  if (key.code === 'Space' || key.code === 'Enter') {\n                                    this.setTheme(themeName.id);\n                                  }\n                                }}\n                              >\n                                <div class=\"option-tick\">\n                                  ${this.getDefaultTheme() === themeName.id\n                                    ? html`\n                                        <svg\n                                          width=\"24\"\n                                          height=\"24\"\n                                          viewBox=\"0 0 24 24\"\n                                          fill=\"none\"\n                                          xmlns=\"http://www.w3.org/2000/svg\"\n                                        >\n                                          <path\n                                            fill-rule=\"evenodd\"\n                                            clip-rule=\"evenodd\"\n                                            d=\"M20.5281 5.9372C20.821 6.23009 20.821 6.70497 20.5281 6.99786L9.46297 18.063C9.32168 18.2043 9.12985 18.2833 8.93004 18.2826C8.73023 18.2819 8.53895 18.2015 8.39864 18.0593L3.46795 13.0596C3.1771 12.7647 3.1804 12.2898 3.47532 11.999C3.77024 11.7081 4.2451 11.7114 4.53595 12.0063L8.93634 16.4683L19.4675 5.9372C19.7604 5.64431 20.2352 5.64431 20.5281 5.9372Z\"\n                                            fill=\"#20272C\"\n                                          />\n                                        </svg>\n                                      `\n                                    : html`<div style=\"width: 24px; height: 24px\"></div>`}\n                                </div>\n                                <div>${themeName.id}</div>\n                              </button>\n                            </li>\n                          `;\n                        })}\n                      </ul>\n                    </div>`\n                : html``}\n              ${this._statesTabIsOpen\n                ? html`<div class=\"option-title-themes-row\">\n                      <button\n                        class=\"option-title-button themes\"\n                        aria-label=\"Back to main popover menu\"\n                        @click=${(): void => {\n                          this._statesTabIsOpen = !this._statesTabIsOpen;\n                          this.requestUpdate();\n                        }}\n                      >\n                        <div class=\"option-title-chevron\">\n                          <svg\n                            width=\"24\"\n                            height=\"24\"\n                            viewBox=\"0 0 24 24\"\n                            fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                          >\n                            <path\n                              fill-rule=\"evenodd\"\n                              clip-rule=\"evenodd\"\n                              d=\"M13.5303 6.46967C13.8232 6.76256 13.8232 7.23744 13.5303 7.53033L9.06066 12L13.5303 16.4697C13.8232 16.7626 13.8232 17.2374 13.5303 17.5303C13.2374 17.8232 12.7626 17.8232 12.4697 17.5303L7.46967 12.5303C7.17678 12.2374 7.17678 11.7626 7.46967 11.4697L12.4697 6.46967C12.7626 6.17678 13.2374 6.17678 13.5303 6.46967Z\"\n                              fill=\"#20272C\"\n                            />\n                          </svg>\n                        </div>\n                        <div class=\"option-title-text\">States</div>\n                        <button\n                          class=\"reset-btn\"\n                          @click=${(): void => {\n                            this.exitInteractiveMode();\n                            this.requestUpdate();\n                          }}\n                        >\n                          Reset\n                        </button>\n                      </button>\n                    </div>\n                    <div class=\"option-title-separator\"></div>\n                    <div class=\"option-row\">\n                      <ul>\n                        ${this._statesForCurrentAnimation.map((stateName) => {\n                          return html`\n                            <li>\n                              <button\n                                class=\"option-button\"\n                                aria-label=\"${stateName}\"\n                                @click=${(): void => {\n                                  this.enterInteractiveMode(stateName);\n                                }}\n                                @keydown=${(key: KeyboardEvent): void => {\n                                  if (key.code === 'Space' || key.code === 'Enter') {\n                                    this.enterInteractiveMode(stateName);\n                                  }\n                                }}\n                              >\n                                <div class=\"option-tick\">\n                                  ${this.getActiveStateMachine() === stateName\n                                    ? html`\n                                        <svg\n                                          width=\"24\"\n                                          height=\"24\"\n                                          viewBox=\"0 0 24 24\"\n                                          fill=\"none\"\n                                          xmlns=\"http://www.w3.org/2000/svg\"\n                                        >\n                                          <path\n                                            fill-rule=\"evenodd\"\n                                            clip-rule=\"evenodd\"\n                                            d=\"M20.5281 5.9372C20.821 6.23009 20.821 6.70497 20.5281 6.99786L9.46297 18.063C9.32168 18.2043 9.12985 18.2833 8.93004 18.2826C8.73023 18.2819 8.53895 18.2015 8.39864 18.0593L3.46795 13.0596C3.1771 12.7647 3.1804 12.2898 3.47532 11.999C3.77024 11.7081 4.2451 11.7114 4.53595 12.0063L8.93634 16.4683L19.4675 5.9372C19.7604 5.64431 20.2352 5.64431 20.5281 5.9372Z\"\n                                            fill=\"#20272C\"\n                                          />\n                                        </svg>\n                                      `\n                                    : html`<div style=\"width: 24px; height: 24px\"></div>`}\n                                </div>\n                                <div>${stateName}</div>\n                              </button>\n                            </li>\n                          `;\n                        })}\n                      </ul>\n                    </div>`\n                : html``}\n            </div>\n          `\n        : html``}\n    `;\n  }\n\n  public override render(): TemplateResult | void {\n    const className: string = this.controls ? 'main controls' : 'main';\n    const animationClass: string = this.controls ? 'animation controls' : 'animation';\n\n    return html`\n      <div id=\"animation-container\" class=${className} lang=\"en\" role=\"img\" aria-label=\"lottie-animation-container\">\n        <div id=\"animation\" class=${animationClass} style=\"background:${this.background};\">\n          ${this._dotLottieCommonPlayer?.currentState === PlayerState.Error\n            ? html` <div class=\"error\">⚠️</div> `\n            : undefined}\n        </div>\n        ${this.controls ? this.renderControls() : undefined}\n      </div>\n    `;\n  }\n}\n\nif (!customElements.get(ELEMENT_NAME)) {\n  customElements.define(ELEMENT_NAME, DotLottiePlayer);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}