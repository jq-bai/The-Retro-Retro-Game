{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const GameStateInitial=_ref=>{let{userList,displayName}=_ref;const eventSourceRef=useRef(null);const[board,setBoard]=useState(generateBoard(10,10));// 10x10 board\nuseEffect(()=>{console.log(\"useEffect triggered with displayName:\",displayName);if(!eventSourceRef.current&&displayName){console.log(\"Creating new EventSource for displayName:\",displayName);const eventSource=new EventSource(`/events?displayName=${displayName}`);eventSourceRef.current=eventSource;eventSource.onmessage=event=>{console.log(\"Event received:\",event.data);// Log any event received\nconst data=JSON.parse(event.data);if(data.type==='boardUpdate'){console.log(\"Board update received:\",data.board);// Log the board update\nsetBoard(data.board);}// Handle other event types if needed\n};eventSource.onerror=error=>{console.error(\"EventSource failed:\",error);eventSource.close();eventSourceRef.current=null;};return()=>{console.log(\"Closing EventSource\");eventSource.close();eventSourceRef.current=null;};}},[displayName]);useEffect(()=>{console.log(\"All clients loaded\");},[userList]);const handleCellClick=(rowIndex,colIndex)=>{const newBoard=board.map((row,rIdx)=>row.map((cell,cIdx)=>rIdx===rowIndex&&cIdx===colIndex?'X':cell));setBoard(newBoard);console.log(\"Sending updated board state to server:\",newBoard);// Log the updated board state\n// Send the updated board state to the server\nfetch(\"/update-board\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({board:newBoard})}).catch(error=>console.error(\"Error updating board:\",error));};return/*#__PURE__*/_jsxs(\"div\",{className:\"hero center\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"user-grid\",children:userList.filter(user=>user.displayName).map(user=>/*#__PURE__*/_jsx(\"div\",{className:\"user-card-container\",children:/*#__PURE__*/_jsx(\"div\",{className:\"user-card\",children:user.displayName})},user.displayName))}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"div\",{className:\"board\",children:board.map((row,rowIndex)=>/*#__PURE__*/_jsx(\"div\",{className:\"board-row\",children:row.map((cell,colIndex)=>/*#__PURE__*/_jsx(\"div\",{className:\"board-cell\",onClick:()=>handleCellClick(rowIndex,colIndex),children:cell},colIndex))},rowIndex))})]});};const generateBoard=(rows,cols)=>{return Array.from({length:rows},()=>Array.from({length:cols},()=>''));};export default GameStateInitial;","map":{"version":3,"names":["React","useState","useEffect","useRef","jsx","_jsx","jsxs","_jsxs","GameStateInitial","_ref","userList","displayName","eventSourceRef","board","setBoard","generateBoard","console","log","current","eventSource","EventSource","onmessage","event","data","JSON","parse","type","onerror","error","close","handleCellClick","rowIndex","colIndex","newBoard","map","row","rIdx","cell","cIdx","fetch","method","headers","body","stringify","catch","className","children","filter","user","onClick","rows","cols","Array","from","length"],"sources":["/Users/baijianqing/VSC/The-Retro-Retro-Game/frontend/src/components/GameStateInitial.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nconst GameStateInitial = ({ userList, displayName }) => {\n    const eventSourceRef = useRef(null);\n    const [board, setBoard] = useState(generateBoard(10, 10)); // 10x10 board\n\n    useEffect(() => {\n        console.log(\"useEffect triggered with displayName:\", displayName);\n\n        if (!eventSourceRef.current && displayName) {\n            console.log(\"Creating new EventSource for displayName:\", displayName);\n            const eventSource = new EventSource(`/events?displayName=${displayName}`);\n            eventSourceRef.current = eventSource;\n\n            eventSource.onmessage = (event) => {\n                console.log(\"Event received:\", event.data); // Log any event received\n                const data = JSON.parse(event.data);\n                if (data.type === 'boardUpdate') {\n                    console.log(\"Board update received:\", data.board); // Log the board update\n                    setBoard(data.board);\n                }\n                // Handle other event types if needed\n            };\n\n            eventSource.onerror = (error) => {\n                console.error(\"EventSource failed:\", error);\n                eventSource.close();\n                eventSourceRef.current = null;\n            };\n\n            return () => {\n                console.log(\"Closing EventSource\");\n                eventSource.close();\n                eventSourceRef.current = null;\n            };\n        }\n    }, [displayName]);\n\n    useEffect(() => {\n        console.log(\"All clients loaded\");\n    }, [userList]);\n\n    const handleCellClick = (rowIndex, colIndex) => {\n        const newBoard = board.map((row, rIdx) => \n            row.map((cell, cIdx) => (rIdx === rowIndex && cIdx === colIndex ? 'X' : cell))\n        );\n        setBoard(newBoard);\n\n        console.log(\"Sending updated board state to server:\", newBoard); // Log the updated board state\n\n        // Send the updated board state to the server\n        fetch(\"/update-board\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ board: newBoard }),\n        }).catch(error => console.error(\"Error updating board:\", error));\n    };\n\n    return (\n        <div className=\"hero center\">\n            <div className=\"user-grid\">\n                {userList.filter(user => user.displayName).map(user => (\n                    <div key={user.displayName} className=\"user-card-container\">\n                        <div className=\"user-card\">\n                            {user.displayName}\n                        </div>\n                    </div>\n                ))}\n            </div>\n            <br />\n            <div className=\"board\">\n                {board.map((row, rowIndex) => (\n                    <div key={rowIndex} className=\"board-row\">\n                        {row.map((cell, colIndex) => (\n                            <div \n                                key={colIndex} \n                                className=\"board-cell\" \n                                onClick={() => handleCellClick(rowIndex, colIndex)}\n                            >\n                                {cell}\n                            </div>\n                        ))}\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nconst generateBoard = (rows, cols) => {\n    return Array.from({ length: rows }, () => Array.from({ length: cols }, () => ''));\n};\n\nexport default GameStateInitial;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}