{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import axios from'axios';import WelcomeScreen from'./components/WelcomeScreen';import NameFormScreen from'./components/NameFormScreen';import HoldingScreen from'./components/HoldingScreen';import StartingScreen from'./components/StartingScreen';import GameStateInitial from'./components/GameStateInitial';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[currentScreen,setCurrentScreen]=useState('welcome');const[playerName,setPlayerName]=useState('');const[isReady,setIsReady]=useState(false);const[userList,setUserList]=useState([]);const eventSourceRef=useRef(null);const joinGame=()=>{setCurrentScreen('nameForm');};const submitName=name=>{axios.post('/submit-name',{displayName:name}).then(response=>{setPlayerName(name);setUserList(response.data.users);setCurrentScreen('holding');// Set up SSE connection after user has entered their display name\nif(!eventSourceRef.current){const newEventSource=new EventSource(`/events?displayName=${name}`);newEventSource.onmessage=event=>{const data=JSON.parse(event.data);if(data.type==='userList'){setUserList(data.users);}else if(data.type==='startGame'){setCurrentScreen('starting');}};newEventSource.onerror=error=>{console.error(\"EventSource failed:\",error);newEventSource.close();eventSourceRef.current=null;};eventSourceRef.current=newEventSource;}}).catch(error=>{console.error('Error submitting name:',error);});};const setReady=()=>{axios.post('/set-ready',{displayName:playerName}).then(response=>{setIsReady(prevIsReady=>!prevIsReady);}).catch(error=>{console.error('Error setting ready status:',error);});};useEffect(()=>{// Clean up the EventSource connection when the component unmounts\nreturn()=>{if(eventSourceRef.current){eventSourceRef.current.close();}};},[]);return/*#__PURE__*/_jsxs(\"div\",{children:[currentScreen==='welcome'&&/*#__PURE__*/_jsx(WelcomeScreen,{joinGame:joinGame}),currentScreen==='nameForm'&&/*#__PURE__*/_jsx(NameFormScreen,{onSubmit:submitName}),currentScreen==='holding'&&/*#__PURE__*/_jsx(HoldingScreen,{message:\"Waiting for players...\",userList:userList,onReady:setReady,isReady:isReady}),currentScreen==='starting'&&/*#__PURE__*/_jsx(StartingScreen,{userList:userList,onCountdownComplete:()=>setCurrentScreen('gameState')}),currentScreen==='gameState'&&/*#__PURE__*/_jsx(GameStateInitial,{userList:userList,displayName:playerName})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","WelcomeScreen","NameFormScreen","HoldingScreen","StartingScreen","GameStateInitial","jsx","_jsx","jsxs","_jsxs","App","currentScreen","setCurrentScreen","playerName","setPlayerName","isReady","setIsReady","userList","setUserList","eventSourceRef","joinGame","submitName","name","post","displayName","then","response","data","users","current","newEventSource","EventSource","onmessage","event","JSON","parse","type","onerror","error","console","close","catch","setReady","prevIsReady","children","onSubmit","message","onReady","onCountdownComplete"],"sources":["/Users/baijianqing/VSC/The-Retro-Retro-Game/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport WelcomeScreen from './components/WelcomeScreen';\nimport NameFormScreen from './components/NameFormScreen';\nimport HoldingScreen from './components/HoldingScreen';\nimport StartingScreen from './components/StartingScreen';\nimport GameStateInitial from './components/GameStateInitial';\n\nfunction App() {\n    const [currentScreen, setCurrentScreen] = useState('welcome');\n    const [playerName, setPlayerName] = useState('');\n    const [isReady, setIsReady] = useState(false);\n    const [userList, setUserList] = useState([]);\n    const eventSourceRef = useRef(null);\n\n    const joinGame = () => {\n        setCurrentScreen('nameForm');\n    };\n\n    const submitName = (name) => {\n        axios.post('/submit-name', { displayName: name })\n            .then(response => {\n                setPlayerName(name);\n                setUserList(response.data.users);\n                setCurrentScreen('holding');\n\n                // Set up SSE connection after user has entered their display name\n                if (!eventSourceRef.current) {\n                    const newEventSource = new EventSource(`/events?displayName=${name}`);\n                    newEventSource.onmessage = (event) => {\n                        const data = JSON.parse(event.data);\n                        if (data.type === 'userList') {\n                            setUserList(data.users);\n                        } else if (data.type === 'startGame') {\n                            setCurrentScreen('starting');\n                        }\n                    };\n                    newEventSource.onerror = (error) => {\n                        console.error(\"EventSource failed:\", error);\n                        newEventSource.close();\n                        eventSourceRef.current = null;\n                    };\n                    eventSourceRef.current = newEventSource;\n                }\n            })\n            .catch(error => {\n                console.error('Error submitting name:', error);\n            });\n    };\n\n    const setReady = () => {\n        axios.post('/set-ready', { displayName: playerName })\n            .then(response => {\n                setIsReady(prevIsReady => !prevIsReady);\n            })\n            .catch(error => {\n                console.error('Error setting ready status:', error);\n            });\n    };\n\n    useEffect(() => {\n        // Clean up the EventSource connection when the component unmounts\n        return () => {\n            if (eventSourceRef.current) {\n                eventSourceRef.current.close();\n            }\n        };\n    }, []);\n\n    return (\n        <div>\n            {currentScreen === 'welcome' && <WelcomeScreen joinGame={joinGame} />}\n            {currentScreen === 'nameForm' && <NameFormScreen onSubmit={submitName} />}\n            {currentScreen === 'holding' && <HoldingScreen message=\"Waiting for players...\" userList={userList} onReady={setReady} isReady={isReady} />}\n            {currentScreen === 'starting' && <StartingScreen userList={userList} onCountdownComplete={() => setCurrentScreen('gameState')} />}\n            {currentScreen === 'gameState' && <GameStateInitial userList={userList} displayName={playerName} />}\n        </div>\n    );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}