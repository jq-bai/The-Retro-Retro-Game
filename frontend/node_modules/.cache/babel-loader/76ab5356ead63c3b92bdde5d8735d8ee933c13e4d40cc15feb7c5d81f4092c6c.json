{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const GameStateInitial=_ref=>{let{userList,displayName}=_ref;const eventSourceRef=useRef(null);const[board,setBoard]=useState(generateBoard(10,10));// 10x10 board\nuseEffect(()=>{console.log(\"Game has started\");if(!eventSourceRef.current&&displayName){const eventSource=new EventSource(`/events?displayName=${displayName}`);eventSourceRef.current=eventSource;eventSource.onmessage=event=>{const data=JSON.parse(event.data);// Handle other event types if needed\n};eventSource.onerror=error=>{console.error(\"EventSource failed:\",error);eventSource.close();eventSourceRef.current=null;};return()=>{eventSource.close();eventSourceRef.current=null;};}// Notify the server that the GameStateInitial component has loaded\nfetch(\"/game-state-initial-loaded\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({displayName})}).then(response=>response.json()).then(data=>console.log(data.message)).catch(error=>console.error(\"Error notifying server:\",error));},[displayName]);useEffect(()=>{console.log(\"All clients loaded\");},[userList]);const handleCellClick=(rowIndex,colIndex)=>{const newBoard=board.map((row,rIdx)=>row.map((cell,cIdx)=>rIdx===rowIndex&&cIdx===colIndex?'X':cell));setBoard(newBoard);};return/*#__PURE__*/_jsxs(\"div\",{className:\"hero center\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"user-grid\",children:userList.filter(user=>user.displayName).map(user=>/*#__PURE__*/_jsx(\"div\",{className:\"user-card-container\",children:/*#__PURE__*/_jsx(\"div\",{className:\"user-card\",children:user.displayName})},user.displayName))}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"div\",{className:\"board\",children:board.map((row,rowIndex)=>/*#__PURE__*/_jsx(\"div\",{className:\"board-row\",children:row.map((cell,colIndex)=>/*#__PURE__*/_jsx(\"div\",{className:\"board-cell\",onClick:()=>handleCellClick(rowIndex,colIndex),children:cell},colIndex))},rowIndex))})]});};const generateBoard=(rows,cols)=>{return Array.from({length:rows},()=>Array.from({length:cols},()=>''));};export default GameStateInitial;","map":{"version":3,"names":["React","useState","useEffect","useRef","jsx","_jsx","jsxs","_jsxs","GameStateInitial","_ref","userList","displayName","eventSourceRef","board","setBoard","generateBoard","console","log","current","eventSource","EventSource","onmessage","event","data","JSON","parse","onerror","error","close","fetch","method","headers","body","stringify","then","response","json","message","catch","handleCellClick","rowIndex","colIndex","newBoard","map","row","rIdx","cell","cIdx","className","children","filter","user","onClick","rows","cols","Array","from","length"],"sources":["/Users/baijianqing/VSC/The-Retro-Retro-Game/frontend/src/components/GameStateInitial.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nconst GameStateInitial = ({ userList, displayName }) => {\n    const eventSourceRef = useRef(null);\n    const [board, setBoard] = useState(generateBoard(10, 10)); // 10x10 board\n\n    useEffect(() => {\n        console.log(\"Game has started\");\n\n        if (!eventSourceRef.current && displayName) {\n            const eventSource = new EventSource(`/events?displayName=${displayName}`);\n            eventSourceRef.current = eventSource;\n\n            eventSource.onmessage = (event) => {\n                const data = JSON.parse(event.data);\n                // Handle other event types if needed\n            };\n\n            eventSource.onerror = (error) => {\n                console.error(\"EventSource failed:\", error);\n                eventSource.close();\n                eventSourceRef.current = null;\n            };\n\n            return () => {\n                eventSource.close();\n                eventSourceRef.current = null;\n            };\n        }\n\n        // Notify the server that the GameStateInitial component has loaded\n        fetch(\"/game-state-initial-loaded\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ displayName }),\n        }).then(response => response.json())\n          .then(data => console.log(data.message))\n          .catch(error => console.error(\"Error notifying server:\", error));\n\n    }, [displayName]);\n\n    useEffect(() => {\n        console.log(\"All clients loaded\");\n    }, [userList]);\n\n    const handleCellClick = (rowIndex, colIndex) => {\n        const newBoard = board.map((row, rIdx) => \n            row.map((cell, cIdx) => (rIdx === rowIndex && cIdx === colIndex ? 'X' : cell))\n        );\n        setBoard(newBoard);\n    };\n\n    return (\n        <div className=\"hero center\">\n            <div className=\"user-grid\">\n                {userList.filter(user => user.displayName).map(user => (\n                    <div key={user.displayName} className=\"user-card-container\">\n                        <div className=\"user-card\">\n                            {user.displayName}\n                        </div>\n                    </div>\n                ))}\n            </div>\n            <br />\n            <div className=\"board\">\n                {board.map((row, rowIndex) => (\n                    <div key={rowIndex} className=\"board-row\">\n                        {row.map((cell, colIndex) => (\n                            <div \n                                key={colIndex} \n                                className=\"board-cell\" \n                                onClick={() => handleCellClick(rowIndex, colIndex)}\n                            >\n                                {cell}\n                            </div>\n                        ))}\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nconst generateBoard = (rows, cols) => {\n    return Array.from({ length: rows }, () => Array.from({ length: cols }, () => ''));\n};\n\nexport default GameStateInitial;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}