{"ast":null,"code":"/*\n    This is the main game state\n*/import React,{useState,useEffect,useRef}from'react';// Imports the useState, useEffect, and useRef hooks from React\nimport{DotLottieReact}from'@lottiefiles/dotlottie-react';// Imports the DotLottieReact component from the DotLottieReact library\n// GameStateInitial component with userList, displayName, eventSource, setCurrentScreen, and setWinner prop\nimport{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";const GameStateInitial=_ref=>{let{userList,displayName,eventSource,setCurrentScreen,setWinner}=_ref;const[board,setBoard]=useState([]);// State variable to track the game board\nconst[revealedCells,setRevealedCells]=useState([]);// State variable to track the revealed cells\nconst[currentPlayer,setCurrentPlayer]=useState(null);// State variable to track the current player\nconst[scores,setScores]=useState({});// State variable to track the scores of all connected clients\nconst[dotLottie,setDotLottie]=React.useState(null);// State variable to track the DotLottie animation\nconst[lastActionMessage,setLastActionMessage]=useState('Game has started');// State variable to track the last action message\n// Function to handle the DotLottie animation\nconst dotLottieRefCallback=dotLottie=>{setDotLottie(dotLottie);};// useEffect hook to handle the EventSource connection\nuseEffect(()=>{if(eventSource){eventSource.onmessage=event=>{const data=JSON.parse(event.data);// Handling different types of events from the server\nif(data.type==='boardUpdate'){console.log(\"Board update received:\",data.board,data.revealedCells,data.scores);setBoard(data.board);setRevealedCells(data.revealedCells);setScores(data.scores);}else if(data.type==='currentPlayer'){console.log(\"Current player update received:\",data.displayName);setCurrentPlayer(data.displayName);}else if(data.type==='gameEnd'){console.log(\"Game end received:\",data.winner);setWinner(data.winner);setCurrentScreen('gameStateEnd');}else if(data.type==='lastAction'){console.log(\"Last action received:\",data.message);setLastActionMessage(data.message);}};// Error handling for the EventSource connection\neventSource.onerror=error=>{console.error(\"EventSource failed:\",error);eventSource.close();};}},[displayName,eventSource,setCurrentScreen,setWinner]);// useEffect hook to handle the userList\nuseEffect(()=>{},[userList]);// useEffect hook to fetch the initial board, player, and scores from the server\nuseEffect(()=>{// Fetch the initial board from the server\nfetch(\"/generate-board\").then(response=>response.json()).then(data=>{console.log(\"Fetched initial board:\",data.board);setBoard(data.board);setRevealedCells(Array.from({length:data.board.length},()=>Array(data.board[0].length).fill(false)));}).catch(error=>console.error(\"Error fetching initial board:\",error));// Fetch the initial player from the server\nfetch(\"/initial-player\").then(response=>response.json()).then(data=>{console.log(\"Fetched initial player:\",data.displayName);setCurrentPlayer(data.displayName);}).catch(error=>console.error(\"Error fetching initial player:\",error));// Fetch the initial scores from the server\nfetch(\"/initial-scores\").then(response=>response.json()).then(data=>{console.log(\"Fetched initial scores:\",data.scores);setScores(data.scores);}).catch(error=>console.error(\"Error fetching initial scores:\",error));},[]);// Function to handle cell clicks\nconst handleCellClick=(rowIndex,colIndex)=>{if(revealedCells[rowIndex][colIndex]||currentPlayer!==displayName)return;// Prevents clicking on the same cell more than once or if it's not the player's turn\nconst newRevealedCells=revealedCells.map((row,rIdx)=>row.map((cell,cIdx)=>rIdx===rowIndex&&cIdx===colIndex?true:cell));setRevealedCells(newRevealedCells);const isMine=board[rowIndex][colIndex]==='ðŸ’£';const scoreChange=isMine?-1:1;const newScores={...scores,[displayName]:(scores[displayName]||0)+scoreChange};setScores(newScores);// Sends the updated board state and scores to the server\nfetch(\"/update-board\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({board,revealedCells:newRevealedCells,scores:newScores,displayName,lastOpenedCell:{row:rowIndex,col:colIndex}})}).then(response=>{if(!response.ok){throw new Error(`HTTP error! status: ${response.status}`);}return response.json();}).then(data=>{console.log(\"Server response:\",data);}).catch(error=>console.error(\"Error updating board:\",error));console.log(\"Sending updated board state and scores to server:\",board,newRevealedCells,newScores);// Plays the Lottie animation once when a cell is clicked\nif(dotLottie){dotLottie.play();}};// DEV FUNCTION\nconst revealAllCells=()=>{const newRevealedCells=revealedCells.map(row=>row.map(()=>true));setRevealedCells(newRevealedCells);console.log(\"All cells revealed for testing purposes\");const newScores={...scores};const dataToSend={board,revealedCells:newRevealedCells,scores:newScores,displayName,lastOpenedCell:{row:1,col:1}};console.log(\"Sending data to server:\",dataToSend);fetch(\"/update-board\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify(dataToSend)}).catch(error=>console.error(\"Error updating board:\",error));};// Renders JSX visual elements\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"hero center\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"user-grid\",children:userList.filter(user=>user.displayName).map(user=>/*#__PURE__*/_jsx(\"div\",{className:\"user-card-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:`user-card ${user.displayName===currentPlayer?'current-player':''}`,children:[user.displayName===displayName?\"You\":user.displayName,/*#__PURE__*/_jsxs(\"div\",{children:[\" Score:\",scores[user.displayName]||0]})]})},user.displayName))}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"div\",{className:\"board\",children:board.map((row,rowIndex)=>/*#__PURE__*/_jsx(\"div\",{className:\"board-row\",children:row.map((cell,colIndex)=>/*#__PURE__*/_jsx(\"div\",{className:`board-cell ${revealedCells[rowIndex][colIndex]&&board[rowIndex][colIndex]==='ðŸ’£'?'mine':''}`,onClick:()=>handleCellClick(rowIndex,colIndex),children:revealedCells[rowIndex][colIndex]?cell:''},colIndex))},rowIndex))}),/*#__PURE__*/_jsx(\"br\",{}),lastActionMessage&&/*#__PURE__*/_jsx(\"div\",{className:\"last-action-message\",children:lastActionMessage}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(DotLottieReact,{src:\"https://lottie.host/6acb6297-3b63-47fa-90ff-a552ade44993/hSVEweDdDh.lottie\",loop:false,autoplay:true,dotLottieRefCallback:dotLottieRefCallback,style:{width:'var(--size-large)',height:'var(--size-large)'}}),/*#__PURE__*/_jsx(\"br\",{})]});};export default GameStateInitial;","map":{"version":3,"names":["React","useState","useEffect","useRef","DotLottieReact","jsxs","_jsxs","jsx","_jsx","GameStateInitial","_ref","userList","displayName","eventSource","setCurrentScreen","setWinner","board","setBoard","revealedCells","setRevealedCells","currentPlayer","setCurrentPlayer","scores","setScores","dotLottie","setDotLottie","lastActionMessage","setLastActionMessage","dotLottieRefCallback","onmessage","event","data","JSON","parse","type","console","log","winner","message","onerror","error","close","fetch","then","response","json","Array","from","length","fill","catch","handleCellClick","rowIndex","colIndex","newRevealedCells","map","row","rIdx","cell","cIdx","isMine","scoreChange","newScores","method","headers","body","stringify","lastOpenedCell","col","ok","Error","status","play","revealAllCells","dataToSend","className","children","filter","user","onClick","src","loop","autoplay","style","width","height"],"sources":["/Users/baijianqing/VSC/The-Retro-Retro-Game/frontend/src/components/GameStateInitial.js"],"sourcesContent":["/*\n    This is the main game state\n*/\n\nimport React, { useState, useEffect, useRef } from 'react'; // Imports the useState, useEffect, and useRef hooks from React\nimport { DotLottieReact } from '@lottiefiles/dotlottie-react'; // Imports the DotLottieReact component from the DotLottieReact library\n\n// GameStateInitial component with userList, displayName, eventSource, setCurrentScreen, and setWinner prop\nconst GameStateInitial = ({ userList, displayName, eventSource, setCurrentScreen, setWinner }) => {\n    const [board, setBoard] = useState([]); // State variable to track the game board\n    const [revealedCells, setRevealedCells] = useState([]); // State variable to track the revealed cells\n    const [currentPlayer, setCurrentPlayer] = useState(null); // State variable to track the current player\n    const [scores, setScores] = useState({}); // State variable to track the scores of all connected clients\n    const [dotLottie, setDotLottie] = React.useState(null); // State variable to track the DotLottie animation\n    const [lastActionMessage, setLastActionMessage] = useState('Game has started'); // State variable to track the last action message\n\n    // Function to handle the DotLottie animation\n    const dotLottieRefCallback = (dotLottie) => {\n        setDotLottie(dotLottie);\n    };\n\n    // useEffect hook to handle the EventSource connection\n    useEffect(() => {\n        if (eventSource) {\n            eventSource.onmessage = (event) => {\n                const data = JSON.parse(event.data);\n\n                // Handling different types of events from the server\n                if (data.type === 'boardUpdate') {\n                    console.log(\"Board update received:\", data.board, data.revealedCells, data.scores);\n                    setBoard(data.board);\n                    setRevealedCells(data.revealedCells);\n                    setScores(data.scores);\n                } else if (data.type === 'currentPlayer') {\n                    console.log(\"Current player update received:\", data.displayName);\n                    setCurrentPlayer(data.displayName);\n                } else if (data.type === 'gameEnd') {\n                    console.log(\"Game end received:\", data.winner);\n                    setWinner(data.winner);\n                    setCurrentScreen('gameStateEnd');\n                } else if (data.type === 'lastAction') {\n                    console.log(\"Last action received:\", data.message);\n                    setLastActionMessage(data.message);\n                }\n            };\n\n            // Error handling for the EventSource connection\n            eventSource.onerror = (error) => {\n                console.error(\"EventSource failed:\", error);\n                eventSource.close();\n            };\n        }\n    }, [displayName, eventSource, setCurrentScreen, setWinner]);\n\n    // useEffect hook to handle the userList\n    useEffect(() => {}, [userList]);\n\n    // useEffect hook to fetch the initial board, player, and scores from the server\n    useEffect(() => {\n        // Fetch the initial board from the server\n        fetch(\"/generate-board\")\n            .then(response => response.json())\n            .then(data => {\n                console.log(\"Fetched initial board:\", data.board);\n                setBoard(data.board);\n                setRevealedCells(Array.from({ length: data.board.length }, () => Array(data.board[0].length).fill(false)));\n            })\n            .catch(error => console.error(\"Error fetching initial board:\", error));\n\n        // Fetch the initial player from the server\n        fetch(\"/initial-player\")\n            .then(response => response.json())\n            .then(data => {\n                console.log(\"Fetched initial player:\", data.displayName);\n                setCurrentPlayer(data.displayName);\n            })\n            .catch(error => console.error(\"Error fetching initial player:\", error));\n\n        // Fetch the initial scores from the server\n        fetch(\"/initial-scores\")\n            .then(response => response.json())\n            .then(data => {\n                console.log(\"Fetched initial scores:\", data.scores);\n                setScores(data.scores);\n            })\n            .catch(error => console.error(\"Error fetching initial scores:\", error));\n    }, []);\n\n    // Function to handle cell clicks\n    const handleCellClick = (rowIndex, colIndex) => {\n        if (revealedCells[rowIndex][colIndex] || currentPlayer !== displayName) return; // Prevents clicking on the same cell more than once or if it's not the player's turn\n\n        const newRevealedCells = revealedCells.map((row, rIdx) => \n            row.map((cell, cIdx) => (rIdx === rowIndex && cIdx === colIndex ? true : cell))\n        );\n        setRevealedCells(newRevealedCells);\n\n        const isMine = board[rowIndex][colIndex] === 'ðŸ’£';\n        const scoreChange = isMine ? -1 : 1;\n        const newScores = { ...scores, [displayName]: (scores[displayName] || 0) + scoreChange };\n        setScores(newScores);\n\n        // Sends the updated board state and scores to the server\n        fetch(\"/update-board\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ board, revealedCells: newRevealedCells, scores: newScores, displayName, lastOpenedCell: { row: rowIndex, col: colIndex } }),\n        })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return response.json();\n        })\n        .then(data => {\n            console.log(\"Server response:\", data);\n        })\n        .catch(error => console.error(\"Error updating board:\", error));\n        console.log(\"Sending updated board state and scores to server:\", board, newRevealedCells, newScores);\n\n        // Plays the Lottie animation once when a cell is clicked\n        if (dotLottie) {\n            dotLottie.play();\n        }\n    };\n\n    // DEV FUNCTION\n    const revealAllCells = () => {\n        const newRevealedCells = revealedCells.map(row => row.map(() => true));\n        setRevealedCells(newRevealedCells);\n        console.log(\"All cells revealed for testing purposes\");\n        const newScores = { ...scores };\n        const dataToSend = { board, revealedCells: newRevealedCells, scores: newScores, displayName, lastOpenedCell: { row: 1, col: 1 } };\n        console.log(\"Sending data to server:\", dataToSend);\n        fetch(\"/update-board\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(dataToSend),\n        }).catch(error => console.error(\"Error updating board:\", error));\n    };\n\n    // Renders JSX visual elements\n    return (\n        <div className=\"hero center\">\n            <div className=\"user-grid\">\n                {userList.filter(user => user.displayName).map(user => (\n                    <div key={user.displayName} className=\"user-card-container\">\n                        <div className={`user-card ${user.displayName === currentPlayer ? 'current-player' : ''}`}>\n                            {user.displayName === displayName ? \"You\" : user.displayName}\n                            <div> Score:{scores[user.displayName] || 0}</div>\n                        </div>\n                    </div>\n                ))}\n            </div>\n            <br />\n            <br />\n            <div className=\"board\">\n                {board.map((row, rowIndex) => (\n                    <div key={rowIndex} className=\"board-row\">\n                        {row.map((cell, colIndex) => (\n                            <div \n                                key={colIndex} \n                                className={`board-cell ${revealedCells[rowIndex][colIndex] && board[rowIndex][colIndex] === 'ðŸ’£' ? 'mine' : ''}`} \n                                onClick={() => handleCellClick(rowIndex, colIndex)}\n                            >\n                                {revealedCells[rowIndex][colIndex] ? cell : ''}\n                            </div>\n                        ))}\n                    </div>\n                ))}\n            </div>\n            <br />\n            {/* Display the last action message */}\n            {lastActionMessage && <div className=\"last-action-message\">{lastActionMessage}</div>}\n            <br />\n            <DotLottieReact\n                src=\"https://lottie.host/6acb6297-3b63-47fa-90ff-a552ade44993/hSVEweDdDh.lottie\"\n                loop={false}\n                autoplay={true}\n                dotLottieRefCallback={dotLottieRefCallback}\n                style={{ width: 'var(--size-large)', height: 'var(--size-large)' }}\n            />\n            <br />\n            {/* DEV BUTTON */}\n            {/* <button onClick={revealAllCells}>Reveal All Cells</button> */}\n        </div>\n    );\n};\n\nexport default GameStateInitial;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}